[{"/home/rasmus/Documents/Coding/swift-writer/src/index.js":"1","/home/rasmus/Documents/Coding/swift-writer/src/App.js":"2","/home/rasmus/Documents/Coding/swift-writer/src/reportWebVitals.js":"3","/home/rasmus/Documents/Coding/swift-writer/src/components/MainNavigation/MainNavigation.jsx":"4","/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/PrimaryButton/PrimaryButton.jsx":"5","/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/SecondaryButton/SecondaryButton.jsx":"6","/home/rasmus/Documents/Coding/swift-writer/src/contexts/LanguageContext.js":"7","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/SignUpPage/SignUpPage.jsx":"8","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickContestPage/QuickContestPage.jsx":"9","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickPractisePage/QuickPractisePage.jsx":"10","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/SignInPage/SignInPage.jsx":"11","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/FeedbackPage/FeedbackPage.jsx":"12","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickContestPage/QuickContestSettings/QuickContestSettings.jsx":"13","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickPractisePage/QuckPractiseSettings/QuckPractiseSettings.jsx":"14","/home/rasmus/Documents/Coding/swift-writer/src/components/Hands/LeftHand/LeftHand.jsx":"15","/home/rasmus/Documents/Coding/swift-writer/src/components/Hands/RightHand/RightHand.jsx":"16","/home/rasmus/Documents/Coding/swift-writer/src/components/Keyboards/Swedish/Windows/SweWinKeyboard.jsx":"17","/home/rasmus/Documents/Coding/swift-writer/src/components/Hands/FingerIndicator/FingerIndicator.jsx":"18","/home/rasmus/Documents/Coding/swift-writer/src/utility/findStopsInText.js":"19","/home/rasmus/Documents/Coding/swift-writer/src/utility/wordsPerMinToUpdateTime.js":"20","/home/rasmus/Documents/Coding/swift-writer/src/components/common/TextMarker/TextMarker.jsx":"21","/home/rasmus/Documents/Coding/swift-writer/src/components/common/Checkbox/Checkbox.jsx":"22","/home/rasmus/Documents/Coding/swift-writer/src/components/common/Checkboxes/Checkboxes.jsx":"23","/home/rasmus/Documents/Coding/swift-writer/src/components/common/Slider/CustomSlider1.jsx":"24","/home/rasmus/Documents/Coding/swift-writer/src/components/common/RadioButton/RadioButton.jsx":"25","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/FormContainer/FormContainer.jsx":"26","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/ShortTextInput/ShortTextInput.jsx":"27","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/HomePage/HomePage.jsx":"28","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/HomePage/KeyboardContainer/KeyboardContainer.jsx":"29","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/HomePage/WelcomeAnimation/WelcomeAnimation.jsx":"30","/home/rasmus/Documents/Coding/swift-writer/src/components/KeyBoard/Keyboard.jsx":"31","/home/rasmus/Documents/Coding/swift-writer/src/components/KeyBoard/Key/Key.jsx":"32","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/Divider/Divider.jsx":"33","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/formButtons/GoogleAuthButton/GoogleAuthButton.jsx":"34","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/formButtons/SubmitButton/SubmitButton.jsx":"35","/home/rasmus/Documents/Coding/swift-writer/src/utility/sliderStyles.js":"36","/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/TestButton.jsx":"37","/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/CustomButton.jsx":"38"},{"size":1018,"mtime":1629362460746,"results":"39","hashOfConfig":"40"},{"size":1879,"mtime":1629362904224,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":1629361281635,"results":"42","hashOfConfig":"40"},{"size":2121,"mtime":1629362666327,"results":"43","hashOfConfig":"40"},{"size":941,"mtime":1629378974457,"results":"44","hashOfConfig":"40"},{"size":1030,"mtime":1629378838973,"results":"45","hashOfConfig":"40"},{"size":794,"mtime":1629361281599,"results":"46","hashOfConfig":"40"},{"size":3120,"mtime":1629363414695,"results":"47","hashOfConfig":"40"},{"size":1916,"mtime":1629362836265,"results":"48","hashOfConfig":"40"},{"size":1924,"mtime":1629362777998,"results":"49","hashOfConfig":"40"},{"size":3032,"mtime":1629363235705,"results":"50","hashOfConfig":"40"},{"size":2061,"mtime":1629370247986,"results":"51","hashOfConfig":"40"},{"size":3150,"mtime":1629363386219,"results":"52","hashOfConfig":"40"},{"size":9128,"mtime":1629363292020,"results":"53","hashOfConfig":"40"},{"size":1710,"mtime":1629363253044,"results":"54","hashOfConfig":"40"},{"size":1715,"mtime":1629380256210,"results":"55","hashOfConfig":"40"},{"size":6813,"mtime":1629363102938,"results":"56","hashOfConfig":"40"},{"size":1606,"mtime":1629361281595,"results":"57","hashOfConfig":"40"},{"size":241,"mtime":1629362323827,"results":"58","hashOfConfig":"40"},{"size":534,"mtime":1629362324038,"results":"59","hashOfConfig":"40"},{"size":539,"mtime":1629361281595,"results":"60","hashOfConfig":"40"},{"size":968,"mtime":1629361281591,"results":"61","hashOfConfig":"40"},{"size":325,"mtime":1629361281591,"results":"62","hashOfConfig":"40"},{"size":937,"mtime":1629363280636,"results":"63","hashOfConfig":"40"},{"size":1348,"mtime":1629361281595,"results":"64","hashOfConfig":"40"},{"size":1182,"mtime":1629362944272,"results":"65","hashOfConfig":"40"},{"size":617,"mtime":1629361281595,"results":"66","hashOfConfig":"40"},{"size":6390,"mtime":1629363320812,"results":"67","hashOfConfig":"40"},{"size":3169,"mtime":1629361281599,"results":"68","hashOfConfig":"40"},{"size":716,"mtime":1629362994335,"results":"69","hashOfConfig":"40"},{"size":1732,"mtime":1629363096449,"results":"70","hashOfConfig":"40"},{"size":6056,"mtime":1629363141888,"results":"71","hashOfConfig":"40"},{"size":334,"mtime":1629361281595,"results":"72","hashOfConfig":"40"},{"size":523,"mtime":1629363376531,"results":"73","hashOfConfig":"40"},{"size":322,"mtime":1629361281595,"results":"74","hashOfConfig":"40"},{"size":566,"mtime":1629362323998,"results":"75","hashOfConfig":"40"},{"size":476,"mtime":1629361281591,"results":"76","hashOfConfig":"40"},{"size":294,"mtime":1629361281591,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"4q3q7g",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/home/rasmus/Documents/Coding/swift-writer/src/index.js",[],["170","171"],"/home/rasmus/Documents/Coding/swift-writer/src/App.js",[],"/home/rasmus/Documents/Coding/swift-writer/src/reportWebVitals.js",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/MainNavigation/MainNavigation.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/PrimaryButton/PrimaryButton.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/SecondaryButton/SecondaryButton.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/contexts/LanguageContext.js",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/pages/SignUpPage/SignUpPage.jsx",["172"],"import React, { useState, useEffect} from 'react';\nimport classes from './signUpPage.module.scss';\n\nimport findStopsInText from '../../../utility/findStopsInText';\nimport wordsPerMinToUpdateTime from '../../../utility/wordsPerMinToUpdateTime';\n\nimport TextMarker from '../../common/TextMarker/TextMarker';\n\nimport SignUpForm from '../../common/forms/FormContainer/FormContainer';\nimport EmailInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport UsernameInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport PasswordInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport RepeatPasswordInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport SubmitButton from '../../common/forms/formButtons/SubmitButton/SubmitButton';\nimport OrDivider from '../../common/forms/Divider/Divider';\nimport GoogleSignUpButton from '../../common/forms/formButtons/GoogleAuthButton/GoogleAuthButton';\n\nconst SignUpPage = () => {\n    const fullHeaderText = \"Sign Up\";\n    const updateTime = wordsPerMinToUpdateTime(75, fullHeaderText);\n    \n    const [headerText, setHeaderText] = useState(\" \");\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\n    const [charIdx, setCharIdx] = useState(0);\n    const [animationFinished, setAnimationFinished] = useState(false);\n    const [showContent, setShowContent] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (stops.includes(charIdx)) {\n                let tempStops = [...stops];\n                tempStops.shift();\n                setStops(tempStops);\n            } else if (charIdx < fullHeaderText.length) {\n                let newChar = fullHeaderText.charAt(charIdx);\n\n                if (charIdx === 0) {\n                    setHeaderText(newChar);\n                } else {\n                    setHeaderText(headerText.concat(newChar));\n                }\n                \n                setCharIdx(charIdx + 1);\n            } else {\n                setAnimationFinished(true);\n            }\n        }, updateTime);\n\n        setShowContent(true);\n    }, [charIdx, stops]);\n    \n\n    return (\n        <div className={classes.SignUpPage}>\n            <h1>\n                {headerText}\n                <TextMarker hide={animationFinished} />\n            </h1>\n\n            <SignUpForm \n                show = {showContent}\n            >\n                <EmailInput inputName = \"Email\" />\n                <UsernameInput inputName = \"Username\" />\n                <PasswordInput inputName = \"Password\" inputType=\"password\"/>\n                <RepeatPasswordInput inputName = \"Repeat Password\" inputType=\"password\"/>\n\n                <SubmitButton \n                    text = \"Create free account\"\n                    // onChange = {e => e.preventDefault()}\n                />\n                <OrDivider text=\"or\" />\n                <GoogleSignUpButton\n                    text=\"Sign up with Google\"\n                    onClick = {() => console.log(\"User wants to sign up with Google!\")}\n                />\n            </SignUpForm>\n        </div>\n    )\n}\n\nexport default SignUpPage;","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickContestPage/QuickContestPage.jsx",["173"],"import React, {useEffect, useState} from 'react';\nimport classes from './quickContestPage.module.scss';\n\nimport findStopsInText from '../../../utility//findStopsInText';\nimport wordsPerMinToUpdateTime from '../../../utility/wordsPerMinToUpdateTime';\n\nimport TextMarker from '../../common/TextMarker/TextMarker';\nimport QuickContestSettings from './QuickContestSettings/QuickContestSettings';\n\nconst QuickContestPage = () => {\n    const fullHeaderText = \"Quick Contest\";\n    const updateTime = wordsPerMinToUpdateTime(55, fullHeaderText);\n    \n    const [headerText, setHeaderText] = useState(\" \");\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\n    const [charIdx, setCharIdx] = useState(0);\n    const [animationFinished, setAnimationFinished] = useState(false);\n    const [showContent, setShowContent] = useState(false);\n\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (stops.includes(charIdx)) {\n                let tempStops = [...stops];\n                tempStops.shift();\n                setStops(tempStops);\n            } else if (charIdx < fullHeaderText.length) {\n                let newChar = fullHeaderText.charAt(charIdx);\n\n                if (charIdx === 0) {\n                    setHeaderText(newChar);\n                } else {\n                    setHeaderText(headerText.concat(newChar));\n                }\n                \n                setCharIdx(charIdx + 1);\n            } else {\n                setAnimationFinished(true);\n            }\n        }, updateTime);\n\n        setShowContent(true);\n    }, [charIdx, stops]);\n\n    return (\n        <div className={classes.QuickContestPage}>\n            <h1>\n                {headerText}\n                <TextMarker hide={animationFinished} />\n            </h1>\n            <QuickContestSettings \n                showForm = {showContent}\n            />\n        </div>\n    )\n}\n\nexport default QuickContestPage;","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickPractisePage/QuickPractisePage.jsx",["174"],"import React, {useEffect, useState} from 'react';\nimport classes from './quickPractisePage.module.scss';\n\nimport findStopsInText from '../../../utility/findStopsInText';\nimport wordsPerMinToUpdateTime from '../../../utility/wordsPerMinToUpdateTime';\n\nimport TextMarker from '../../common/TextMarker/TextMarker';\nimport QuickPractiseSettings from './QuckPractiseSettings/QuckPractiseSettings';\n\n\nconst QuickPractisePage = () => {\n    const fullHeaderText = \"Quick Practise\";\n    const updateTime = wordsPerMinToUpdateTime(55, fullHeaderText);\n    \n    const [headerText, setHeaderText] = useState(\" \");\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\n    const [charIdx, setCharIdx] = useState(0);\n    const [animationFinished, setAnimationFinished] = useState(false);\n    const [showContent, setShowContent] = useState(false);\n\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (stops.includes(charIdx)) {\n                let tempStops = [...stops];\n                tempStops.shift();\n                setStops(tempStops);\n            } else if (charIdx < fullHeaderText.length) {\n                let newChar = fullHeaderText.charAt(charIdx);\n\n                if (charIdx === 0) {\n                    setHeaderText(newChar);\n                } else {\n                    setHeaderText(headerText.concat(newChar));\n                }\n                \n                setCharIdx(charIdx + 1);\n            } else {\n                setAnimationFinished(true);\n            }\n        }, updateTime);\n\n        setShowContent(true);\n    }, [charIdx, stops]);\n\n    return (\n        <div className={classes.QuickPractisePage}>\n            <h1>\n                {headerText}\n                <TextMarker hide={animationFinished} />\n            </h1>\n            <QuickPractiseSettings \n                showForm = {showContent}\n            />\n\n        </div>\n    )\n}\n\nexport default QuickPractisePage;","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/SignInPage/SignInPage.jsx",["175","176","177","178"],"import React, { useState, useEffect} from 'react';\nimport classes from './signInPage.module.scss';\nimport SWLogo from '../../../resources/icons/SWLogo.svg';\n\nimport findStopsInText from '../../../utility/findStopsInText';\nimport wordsPerMinToUpdateTime from '../../../utility/wordsPerMinToUpdateTime';\n\nimport TextMarker from '../../common/TextMarker/TextMarker';\n\nimport SignInForm from '../../common/forms/FormContainer/FormContainer';\nimport EmailInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport UsernameInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport PasswordInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport RepeatPasswordInput from '../../common/forms/ShortTextInput/ShortTextInput';\nimport SubmitButton from '../../common/forms/formButtons/SubmitButton/SubmitButton';\nimport OrDivider from '../../common/forms/Divider/Divider';\nimport GoogleSignUpButton from '../../common/forms/formButtons/GoogleAuthButton/GoogleAuthButton';\n\nconst SignUpPage = () => {\n    const fullHeaderText = \"Sign In\";\n    const updateTime = wordsPerMinToUpdateTime(75, fullHeaderText);\n    \n    const [headerText, setHeaderText] = useState(\" \");\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\n    const [charIdx, setCharIdx] = useState(0);\n    const [animationFinished, setAnimationFinished] = useState(false);\n    const [showContent, setShowContent] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (stops.includes(charIdx)) {\n                let tempStops = [...stops];\n                tempStops.shift();\n                setStops(tempStops);\n            } else if (charIdx < fullHeaderText.length) {\n                let newChar = fullHeaderText.charAt(charIdx);\n\n                if (charIdx === 0) {\n                    setHeaderText(newChar);\n                } else {\n                    setHeaderText(headerText.concat(newChar));\n                }\n                \n                setCharIdx(charIdx + 1);\n            } else {\n                setAnimationFinished(true);\n            }\n        }, updateTime);\n\n        setShowContent(true);\n    }, [charIdx, stops]);\n    \n\n    return (\n        <div className={classes.SignInPage}>\n            <h1>\n                {headerText}\n                <TextMarker hide={animationFinished} />\n            </h1>\n\n            <SignInForm \n                show = {showContent}\n            >\n                <EmailInput inputName = \"Email or Username\" />\n                <PasswordInput inputName = \"Password\" inputType=\"password\" />\n\n                <SubmitButton \n                    text = \"Sign in\"\n                    // onChange = {e => e.preventDefault()}\n                />\n                <OrDivider text=\"or\" />\n                <GoogleSignUpButton\n                    text=\"Sign in with Google\"\n                    onClick = {() => console.log(\"User wants to sign in with Google!\")}\n                />\n            </SignInForm>\n        </div>\n    )\n}\n\nexport default SignUpPage;","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/FeedbackPage/FeedbackPage.jsx",["179","180","181","182"],"/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickContestPage/QuickContestSettings/QuickContestSettings.jsx",["183","184"],"import React, { useState } from 'react';\nimport classes from './quickContestSettings.module.scss';\n\nimport QuickContestForm from '../../../common/forms/FormContainer/FormContainer';\nimport TypeOfContestRadioButtons from '../../../common/Checkboxes/Checkboxes';\nimport RadioButton from '../../../common/RadioButton/RadioButton';\nimport StartContestButton from '../../../common/forms/formButtons/SubmitButton/SubmitButton';\n\nconst QuickContestSettings = ({showForm}) => {\n    const [userLoggedIn, setUserLoggedIn] = useState(false);\n    const [typeOfContest, setTypeOfContest] = useState({\n        \"Standard\": true,\n        \"With friends\": false\n    })\n    const [contestMode, setContestMode] = useState({\n        \"Ranked\": false,\n        \"Casual\": true\n    });\n    \n\n    const typeOfContestHandler = (newContestType) => {\n        let tempTypeOfContest = {...typeOfContest};\n        let typeOfContestKeys = Object.keys(tempTypeOfContest);\n\n        typeOfContestKeys.forEach(contestType => {\n            tempTypeOfContest[contestType] = false\n        })\n\n        tempTypeOfContest[newContestType] = true;\n        setTypeOfContest(tempTypeOfContest);\n    }\n\n    const contestModeHandler = (newContestMode) => {\n        if (userLoggedIn) {\n            let tempContestMode = {...contestMode};\n            let contestModeKeys = Object.keys(tempContestMode);\n    \n            contestModeKeys.forEach(contestMode => {\n                tempContestMode[contestMode] = false\n            })\n    \n            tempContestMode[newContestMode] = true;\n            setContestMode(tempContestMode);\n        }\n    }\n\n    return (\n        <QuickContestForm \n            show = {showForm}\n            width = \"290px\"\n        >\n            <TypeOfContestRadioButtons title=\"Type of contest\">\n                <RadioButton \n                    name = 'Standard'\n                    isChecked = {typeOfContest['Standard']}\n                    checkboxHandler = {typeOfContestHandler}\n                    colorTheme = \"light\"\n                />\n\n                <RadioButton \n                    name = 'With friends'\n                    isChecked = {typeOfContest['With friends']}\n                    checkboxHandler = {typeOfContestHandler}\n                    colorTheme = \"light\"\n                />\n            </TypeOfContestRadioButtons>\n\n            <TypeOfContestRadioButtons title=\"Contest mode\">\n                <RadioButton \n                    name = 'Ranked'\n                    isChecked = {contestMode['Ranked']}\n                    checkboxHandler = {contestModeHandler}\n                    colorTheme = \"light\"\n                    disableMsg = \"Log in required\"\n                    disable = {true}\n                />\n\n                <RadioButton \n                    name = 'Casual'\n                    isChecked = {contestMode['Casual']}\n                    checkboxHandler = {contestModeHandler}\n                    colorTheme = \"light\"\n                />\n            </TypeOfContestRadioButtons>\n\n            <StartContestButton\n                text = \"Start contest\"\n            />\n        </QuickContestForm>\n    )\n}\n\nexport default QuickContestSettings;","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/QuickPractisePage/QuckPractiseSettings/QuckPractiseSettings.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/Hands/LeftHand/LeftHand.jsx",["185"],"import React from 'react';\nimport classes from './leftHand.module.scss';\n\nimport leftHandImg from '../../../resources/images/leftHand.png';\nimport FingerIndicator from '../FingerIndicator/FingerIndicator';\n\nconst LeftHand = ({highlightedFingers, updateTime, extraClass}) => {\n    let handClasses = [classes.LeftHand];\n\n    if (extraClass !== undefined) {\n        handClasses.push(extraClass);\n    }\n\n    return (\n        <div className={handClasses.join(\" \")}>\n            <FingerIndicator \n                color=\"red\" \n                top = \"50px\"\n                left = \"-11px\"\n                show = {highlightedFingers[\"pinkyL\"]}\n                updateTime = {updateTime}\n            />\n\n            <FingerIndicator \n                color=\"blue\" \n                top = \"-2px\"\n                left = \"28px\"\n                show = {highlightedFingers[\"ringL\"]}\n                updateTime = {updateTime}\n            />\n\n            <FingerIndicator \n                color=\"orange\" \n                top = \"-10px\"\n                left = \"72px\"\n                show = {highlightedFingers[\"middleL\"]}\n                updateTime = {updateTime}\n            />\n\n            <FingerIndicator \n                color=\"green\" \n                top = \"0px\"\n                left = \"116px\"\n                show = {highlightedFingers[\"indexL\"]}\n                updateTime = {updateTime}\n            />\n\n            <FingerIndicator \n                color=\"purple\" \n                top = \"100px\"\n                left = \"175px\"\n                show = {highlightedFingers[\"thumbL\"]}\n                updateTime = {updateTime}\n            />\n\n            <img src={leftHandImg} />\n        </div>\n    )\n}\n\nexport default LeftHand;","/home/rasmus/Documents/Coding/swift-writer/src/components/Hands/RightHand/RightHand.jsx",["186"],"/home/rasmus/Documents/Coding/swift-writer/src/components/Keyboards/Swedish/Windows/SweWinKeyboard.jsx",["187"],"import React from 'react';\nimport classes from './sweWinKeyboard.module.scss';\n\nimport Keyboard from '../../../KeyBoard/Keyboard';\n\nconst SweWinKeyboard = ({\n    keyEnter, \n    keyLeave, \n    clearIndicators, \n    activeKey,\n    updateTime,\n    allKeysActive,\n    extraClass\n}) => {\n    const defaultWidth = '50px';\n    let sweWinKeys = [\n        [\n            {\"char\":'§', \"shiftChar\":'½', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\n            {\"char\":'1', \"shiftChar\":'!', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\n            {\"char\":'2', \"shiftChar\":'\"', \"altGrChar\":'@', \"width\":defaultWidth, \"finger\":\"ringL\"},\n            {\"char\":'3', \"shiftChar\":'#', \"altGrChar\":'£', \"width\":defaultWidth, \"finger\":\"middleL\"},\n            {\"char\":'4', \"shiftChar\":'¤', \"altGrChar\":'$', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":'5', \"shiftChar\":'%', \"altGrChar\":'€', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":'6', \"shiftChar\":'&', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":'7', \"shiftChar\":'/', \"altGrChar\":'{', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":'8', \"shiftChar\":'(', \"altGrChar\":'[', \"width\":defaultWidth, \"finger\":\"middleR\"},\n            {\"char\":'9', \"shiftChar\":')', \"altGrChar\":']', \"width\":defaultWidth, \"finger\":\"ringR\"},\n            {\"char\":'0', \"shiftChar\":'=', \"altGrChar\":'}', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":'+', \"shiftChar\":'?', \"altGrChar\":'\\\\', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":'´', \"shiftChar\":'`', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":\"← Back\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyR\"}\n        ],\n        [\n            {\"char\":'Tab ↹', \"shiftChar\":'', \"altGrChar\":'', \"width\":\"75px\", \"finger\":\"pinkyL\"},\n            {\"char\":'Q', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\n            {\"char\":'W', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringL\"},\n            {\"char\":'E', \"shiftChar\":'', \"altGrChar\":'€', \"width\":defaultWidth, \"finger\":\"middleL\"},\n            {\"char\":'R', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":'T', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":'Y', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":'U', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":'I', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleR\"},\n            {\"char\":'O', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringR\"},\n            {\"char\":'P', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":'Å', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":'¨', \"shiftChar\":'^', \"altGrChar\":'~', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n        ], \n        [\n            {\"char\":'CapsLock', \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyL\"},\n            {\"char\":'A', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\n            {\"char\":'S', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringL\"},\n            {\"char\":'D', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleL\"},\n            {\"char\":'F', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":'G', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":'H', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":'J', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":'K', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleR\"},\n            {\"char\":'L', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringR\"},\n            {\"char\":'Ö', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":'Ä', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":\"'\", \"shiftChar\":'*', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":\"↲ Enter\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"75px\", \"finger\":\"pinkyR\"}\n        ],\n        [\n            {\"char\":\"⇧ Shift\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"75px\", \"finger\":\"pinkyL\"},\n            {\"char\":\"<\", \"shiftChar\":'>', \"altGrChar\":'|', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\n            {\"char\":\"Z\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\n            {\"char\":\"Z\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringL\"},\n            {\"char\":\"C\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleL\"},\n            {\"char\":\"V\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":\"B\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\n            {\"char\":\"N\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":\"M\", \"shiftChar\":'', \"altGrChar\":'µ', \"width\":defaultWidth, \"finger\":\"indexR\"},\n            {\"char\":\",\", \"shiftChar\":';', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleR\"},\n            {\"char\":\".\", \"shiftChar\":':', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringR\"},\n            {\"char\":\"-\", \"shiftChar\":'_', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\n            {\"char\":\"⇧ Shift\", \"shiftChar\":'_', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyR\"},\n        ],\n        [\n            {\"char\":\"Ctrl\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyL\"},\n            {\"char\":\"win\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"51px\", \"finger\":\"pinkyL\"},\n            {\"char\":\"Alt\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyL\"},\n            {\"char\":\"Space\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"350px\", \"finger\":\"thumbR\"},\n            {\"char\":\"Alt Gr\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"ringR\"},\n            {\"char\":\"Fn\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyR\"},\n        ]\n    ];\n\n    return (\n        <Keyboard \n            keys = {sweWinKeys}\n            keyEnter = {keyEnter}\n            keyLeave = {keyLeave}\n            clearIndicators = {clearIndicators}\n            activeKey = {activeKey}\n            updateTime = {updateTime}\n            allKeysActive = {allKeysActive}\n            extraClass = {extraClass}\n        />\n    )\n}\n\nexport default SweWinKeyboard;","/home/rasmus/Documents/Coding/swift-writer/src/components/Hands/FingerIndicator/FingerIndicator.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/utility/findStopsInText.js",[],"/home/rasmus/Documents/Coding/swift-writer/src/utility/wordsPerMinToUpdateTime.js",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/TextMarker/TextMarker.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/Checkbox/Checkbox.jsx",["188","189"],"import React from 'react';\n\nimport classes from './checkbox.module.scss';\n\nconst Checkbox = ({name, isChecked, checkboxHandler, colorTheme, disable=false}) => {\n    let searchClass;\n\n\n    if (colorTheme == 'dark') {\n        searchClass = classes.darkStyling;\n    } else if (colorTheme == 'light') {\n        searchClass = classes.lightStyling;\n    }\n\n    return (\n        <label \n            className = {searchClass} \n            key = {name}\n            style = {{\n                \"cursor\": disable ? \"default\" : \"pointer\",\n                \"opacity\": disable ? \"0.35\" : \"1\"\n            }}\n        >\n            <input\n                name={name}\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => checkboxHandler(name)}\n            />\n\n            <span className={classes.checkmark}></span>\n            <span className={classes.text}>{name}</span>\n            <br />\n        </label>\n    )\n}\n\nexport default Checkbox;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/Checkboxes/Checkboxes.jsx",["190"],"import React from 'react';\nimport classes from './checkboxes.module.scss';\nimport Checkbox from '../Checkbox/Checkbox';\n\nconst Checkboxes = ({children, title}) => {\n    return (\n        <div className={classes.Checkboxes}>\n            <h4>{title}</h4>\n            {children}\n        </div>\n    )\n}\n\nexport default Checkboxes;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/Slider/CustomSlider1.jsx",["191"],"import React from 'react';\nimport classes from './customSlider1.module.scss';\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Slider from '@material-ui/core/Slider';\nimport { discreteMSlider } from '../../../utility/sliderStyles';\n\nconst PrettoSlider = withStyles(discreteMSlider)(Slider);\n\nconst CustomSlider1 = ({\n    sliderValue, \n    valueChangeHandler, \n    minVal, \n    maxVal, \n    stepSize,\n    sliderWidth = \"100%\",\n    sliderMargin = \"0\"\n}) => {\n\n    return (\n        <PrettoSlider\n            defaultValue={sliderValue}\n            getAriaValueText={valueChangeHandler}\n            aria-labelledby=\"discrete-slider\"\n            valueLabelDisplay=\"auto\"\n            step={stepSize}\n            marks\n            min={minVal}\n            max={maxVal}\n            style= {{\n                \"width\": sliderWidth,\n                \"margin\": sliderMargin\n            }}\n        />\n    )\n}\n\nexport default CustomSlider1;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/RadioButton/RadioButton.jsx",["192","193"],"import React from 'react';\n\nimport classes from './radioButton.module.scss';\n\nconst Checkbox = ({name, isChecked, checkboxHandler, colorTheme, disable=false, disableMsg=\"\"}) => {\n    let searchClass, \n        textClass = classes.text;\n\n\n    if (colorTheme == 'dark') {\n        searchClass = classes.darkStyling;\n    } else if (colorTheme == 'light') {\n        searchClass = classes.lightStyling;\n    }\n\n    if (isChecked) {\n        textClass = classes.checkedText;\n    }\n\n    return (\n        <div className={classes.radioButtonContainer}>\n            <label \n                className = {searchClass} \n                key = {name}\n                style = {{\n                    \"cursor\": !isChecked && !disable ? \"pointer\" : \"default\",\n                    \"opacity\": disable ? \"0.35\" : \"1\"\n                }}\n            >\n                <input\n                    name={name}\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onClick={() => checkboxHandler(name)}\n                />\n\n                <span className={classes.checkmark}></span>\n                <span className={textClass}>{name}</span>\n                \n                <br />\n            </label>\n            {disable ? <span className={classes.disableMsg}>{disableMsg}</span> : null}\n        </div>\n    )\n}\n\nexport default Checkbox;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/FormContainer/FormContainer.jsx",["194","195"],"import React from 'react';\nimport classes from './formContainer.module.scss';\n\nimport SWLogo from '../../../../resources/icons/SWLogo.svg';\n\nconst FormContainer = ({show, children, logo, width=\"auto\"}) => {\n    let formLogo = null;\n\n    if (logo === \"none\") {\n        formLogo = null;\n    } else if (logo !== undefined) {\n        formLogo = <img \n            src={logo} \n            style = {{\n                \"marginBottom\": \"20px\"\n            }}\n        />\n    } else {\n        formLogo = <img \n            src={SWLogo} \n            style = {{\n                \"marginBottom\": \"20px\"\n            }}\n        />\n    }\n\n    let formClasses = [classes.FormContainer];\n\n    if (!show) {\n        formClasses.push(classes.hideForm);\n    }\n\n    if (width !== \"auto\") {\n\n    }\n\n    return (\n        <div \n            className={formClasses.join(\" \")}\n            style = {{\n                \"marginTop\": logo === \"none\" ? \"20px\" : \"60px\",\n                \"paddingTop\": logo === \"none\" ? \"20px\" : \"0\",\n                \"width\": width !== \"auto\" ? width : \"fitContent\"\n            }}\n        >\n            {formLogo}\n\n            {children}\n        </div>\n    )\n}\n\nexport default FormContainer;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/ShortTextInput/ShortTextInput.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/pages/HomePage/HomePage.jsx",["196"],"import React, { useState, useEffect } from 'react';\nimport classes from './homePage.module.scss';\n\nimport Slider from '@material-ui/core/Slider';\nimport { withStyles } from '@material-ui/core/styles'\n\nimport KeyboardContainer from './KeyboardContainer/KeyboardContainer';\nimport WelcomeAnimation from './WelcomeAnimation/WelcomeAnimation';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\n\nimport findStopsInText from '../../../utility/findStopsInText';\nimport wordsPerMinToUpdateTime from '../../../utility/wordsPerMinToUpdateTime';\n\n\nconst PrettoSlider = withStyles({\n    root: {\n      color: '#FE6E6E',\n      height: 10,\n    },\n    thumb: {\n      height: 24,\n      width: 24,\n      backgroundColor: '#fff',\n      border: '3px solid currentColor',\n      marginTop: -8,\n      marginLeft: -12,\n      '&:focus, &:hover, &$active': {\n        boxShadow: 'inherit',\n      },\n    },\n    active: {},\n    valueLabel: {\n      left: 'calc(-50% + 2px)',\n    },\n    track: {\n      height: 8,\n      borderRadius: 0,\n    },\n    rail: {\n      height: 8,\n      borderRadius: 0,\n    },\n  })(Slider);\n\nconst HomePage = () => {\n    const activateKeyHandler = (keyToActivate) => {\n        setActiveKey(keyToActivate);\n    }\n\n    const fullWelcomeText = \"Welcome to SwiftWriter - an application made to help you type fast and properly!\";\n    const [welcomeText, setWelcomeText] = useState(\" \");\n    const [charIdx, setCharIdx] = useState(0);\n    const [stops, setStops] = useState(findStopsInText(fullWelcomeText));\n    const [wordsPerMinute, setWordsPerMinute] = useState(5);\n    const [updateTime, setUpdateTime] = useState(wordsPerMinToUpdateTime(wordsPerMinute, fullWelcomeText));\n    const [activeKey, setActiveKey] = useState();\n    const [allKeysActive, setAllKeysActive] = useState(true);\n    const [playAnimation, setPlayAnimation] = useState(true);\n    const [animationFinished, setAnimationFinished] = useState(false);\n\n    const allKeysActiveHandler = () => {\n        setAllKeysActive(!allKeysActive);\n    };\n\n    const animationPlayingHandler = () => {\n        setPlayAnimation(!playAnimation);\n    };\n\n    const getWordsPerMinute = (newWordsPerMinute) => {\n        setWordsPerMinute(newWordsPerMinute);\n        setUpdateTime(wordsPerMinToUpdateTime(newWordsPerMinute, fullWelcomeText));\n    }\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (playAnimation) {\n                if (stops.includes(charIdx)) {\n                    let tempStops = [...stops];\n                    tempStops.shift();\n                    setStops(tempStops);\n                } else if (charIdx < fullWelcomeText.length) {\n                    let newChar = fullWelcomeText.charAt(charIdx);\n                    activateKeyHandler(newChar);\n\n                    if (charIdx === 0) {\n                        setWelcomeText(newChar);\n                    } else {\n                        setWelcomeText(welcomeText.concat(newChar));\n                    }\n                    \n                    setCharIdx(charIdx + 1);\n                } else {\n                    setAnimationFinished(true);\n                    setTimeout(() => {\n                        setWelcomeText(\" \");\n                        setCharIdx(0);\n                        setAnimationFinished(false);\n                    }, 2000);\n                }\n            }\n        }, updateTime);\n    }, [charIdx, stops, playAnimation]);\n\n    return (\n        <div className={classes.FrontPage}>\n            {/* <div>Solna weather: {weatherInSolna}</div> */}\n\n            \n\n            <WelcomeAnimation \n                welcomeText = {welcomeText}\n                animationFinished = {animationFinished}\n                playAnimation = {playAnimation}\n            />\n\n            <PrettoSlider\n                defaultValue={wordsPerMinute}\n                getAriaValueText={getWordsPerMinute}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={5}\n                marks\n                min={5}\n                max={100}\n                style= {{\n                    \"width\": \"500px\",\n                    \"margin\": \"20px auto 10px auto\"\n                }}\n            />\n\n            <p>Words per minute: <strong style={{\"color\":\"#FE6E6E\"}}>{wordsPerMinute}</strong></p>\n\n            <KeyboardContainer \n                keyboardType = \"swe-win\"\n                activeKey = {activeKey}\n                updateTime = {updateTime}\n                allKeysActive = {allKeysActive}\n            />\n            \n            <div className={classes.settings}>\n                <div className={classes.setting}>\n                    <mark className={classes.mappingText}>Animation</mark>\n                    <ToggleButtonGroup\n                        value={playAnimation}\n                        exclusive\n                        onChange={animationPlayingHandler}\n                        style = {{\n                            \"margin\": \"0 auto\"\n                        }}\n                    >\n                        <ToggleButton value={true}>\n                            <PlayIcon />\n                        </ToggleButton>\n\n                        <ToggleButton value={false}>\n                            <PauseIcon />\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n                \n                <div className={classes.setting}>\n                    <mark className={classes.mappingText}>Key-finger mapping</mark>\n                    <ToggleButtonGroup\n                        value={allKeysActive}\n                        exclusive\n                        onChange={allKeysActiveHandler}\n                        style = {{\n                            \"margin\": \"0 auto\"\n                        }}\n                    >\n                        <ToggleButton value={true}>\n                            <div>Show</div>\n                        </ToggleButton>\n                        <ToggleButton value={false}>\n                            <div>Hide</div>\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                </div>\n                \n            </div>\n            \n\n\n        </div>\n    )\n}\n\nexport default HomePage;","/home/rasmus/Documents/Coding/swift-writer/src/components/pages/HomePage/KeyboardContainer/KeyboardContainer.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/pages/HomePage/WelcomeAnimation/WelcomeAnimation.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/KeyBoard/Keyboard.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/KeyBoard/Key/Key.jsx",["197"],"import React from 'react';\nimport classes from './key.module.scss';\n\nconst Key = ({\n    char, \n    shiftChar, \n    altChar, \n    width, \n    finger, \n    keyLeave,\n    keyEnter,\n    updateTime,\n    allKeysActive,\n    active=false\n}) => {\n    let keyWidth, \n        BGColor, \n        borderColor,\n        hasMarker,\n        keyMarkerClass,\n        activeKeyColor,\n        keyClasses;\n    \n    const fingerColorMap = {\n        \"pinkyL\": \"red\",\n        \"ringL\": \"blue\",\n        \"middleL\": \"orange\",\n        \"indexL\": \"green\",\n        \"thumbL\": \"purple\",\n        \"thumbR\": \"purple\",\n        \"indexR\": \"red\",\n        \"middleR\": \"blue\",\n        \"ringR\": \"orange\",\n        \"pinkyR\": \"green\",\n    };\n\n    activeKeyColor = fingerColorMap[finger];\n    keyClasses = [classes.Key];\n\n    if (activeKeyColor === \"red\") {\n        if (allKeysActive && active) {\n            keyClasses.push(classes.redActive);\n            borderColor = \"#BF5252\";\n        } else if (allKeysActive) {\n            keyClasses.push(classes.redKey);\n            borderColor = \"#BF5252\";\n        } else if (!active) {\n            keyClasses.push(classes.inActiveKey, classes.redHover);\n            borderColor = \"#777777\";\n        } else {\n            keyClasses.push(classes.redKey);\n            borderColor = \"#BF5252\";\n        }\n    } else if (activeKeyColor === \"blue\") {\n        if (allKeysActive && active) {\n            keyClasses.push(classes.blueActive);\n            borderColor = \"#5289BF\";\n        } else if (allKeysActive) {\n            keyClasses.push(classes.blueKey);\n            borderColor = \"#5289BF\";\n        } else if (!active) {\n            keyClasses.push(classes.inActiveKey, classes.blueHover);\n            borderColor = \"#777777\";\n        } else {\n            keyClasses.push(classes.blueKey);\n            borderColor = \"#5289BF\";\n        }\n    }  else if (activeKeyColor === \"green\") {\n        if (allKeysActive && active) {\n            keyClasses.push(classes.greenActive);\n            borderColor = \"#439957\";\n        } else if (allKeysActive) {\n            keyClasses.push(classes.greenKey);\n            borderColor = \"#439957\";\n        } else if (!active) {\n            keyClasses.push(classes.inActiveKey, classes.greenHover);\n            borderColor = \"#777777\";\n        } else {\n            keyClasses.push(classes.greenKey);\n            borderColor = \"#439957\";\n        }\n    }  else if (activeKeyColor === \"orange\") {\n        if (allKeysActive && active) {\n            keyClasses.push(classes.orangeActive);\n            borderColor = \"#BF9452\";\n        } else if (allKeysActive) {\n            keyClasses.push(classes.orangeKey);\n            borderColor = \"#BF9452\";\n        } else if (!active) {\n            keyClasses.push(classes.inActiveKey, classes.orangeHover);\n            borderColor = \"#777777\";\n        } else {\n            keyClasses.push(classes.orangeKey);\n            borderColor = \"#BF9452\";\n        }\n    }  else if (activeKeyColor === \"purple\") {\n        if (allKeysActive && active) {\n            keyClasses.push(classes.purpleActive);\n            borderColor = \"#9752BF\";\n        } else if (allKeysActive) {\n            keyClasses.push(classes.purpleKey);\n            borderColor = \"#9752BF\";\n        } else if (!active) {\n            keyClasses.push(classes.inActiveKey, classes.purpleHover);\n            borderColor = \"#777777\";\n        } else {\n            keyClasses.push(classes.purpleKey);\n            borderColor = \"#9752BF\";\n        }\n    } else {\n        if (allKeysActive && active) {\n            keyClasses.push(classes.grayActive);\n            borderColor = \"#777777\";\n        } else if (allKeysActive) {\n            keyClasses.push(classes.grayKey);\n            borderColor = \"#777777\";\n        } else if (!active) {\n            keyClasses.push(classes.inActiveKey, classes.grayHover);\n            borderColor = \"#777777\";\n        } else {\n            keyClasses.push(classes.grayKey);\n            borderColor = \"#777777\";\n        }\n    }\n\n    if (width === undefined) {\n        keyWidth = \"50px\";\n    } else {\n        keyWidth = width;\n    }\n\n    if ('FfJj'.includes(char)) {\n        hasMarker = true;\n    } else {\n        hasMarker = false;\n    }\n\n    if (hasMarker) {\n        keyMarkerClass = classes.marker;\n    } else {\n        keyMarkerClass = classes.hide;\n    }\n\n    let transitionTime;\n\n    if (updateTime > 150) {\n        transitionTime = Math.sqrt(updateTime) / 100;\n    } else {\n        transitionTime = \"none\";\n    }\n\n    let topLeft = \"\", \n        topRight = \"\",\n        bottomLeft = \"\", \n        bottomRight = \"\";\n\n    if (\"0123456789<,.-§¨'\".includes(char)) {\n        bottomLeft = char;\n        topLeft = shiftChar;\n        bottomRight = altChar;\n    } else {\n        topLeft = char;\n        bottomLeft = shiftChar; // Måste lösa detta, bara stora bokstäver ska synas på tangentbordet\n        bottomRight = altChar;\n    }\n\n    return (\n        <div \n            className={keyClasses.join(\" \")}\n            style={{\n                \"width\": keyWidth,\n                \"transition\": transitionTime\n            }}\n            onMouseEnter={() => keyEnter(finger)}\n            onMouseLeave={() => keyLeave()}\n        >\n            {\n                keyWidth !== \"50px\"\n                  ? <div>{char}</div>\n                  : <div>\n                        <div className={classes.topRow}>\n                            {topLeft === \"\" ? <div></div> : <div>{topLeft}</div>}\n                            {topRight === \"\" ? <div></div> : <div>{topRight}</div>}\n                        </div>\n                        <div className={classes.bottomRow}>\n                            {bottomLeft === \"\" ? <div></div> : <div>{bottomLeft}</div>}\n                            {bottomRight === \"\" ? <div></div> : <div>{bottomRight}</div>}\n                        </div>\n                    </div>\n            }\n            <div \n                className={keyMarkerClass}\n                style={{\n                    \"backgroundColor\": borderColor\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Key;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/Divider/Divider.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/formButtons/GoogleAuthButton/GoogleAuthButton.jsx",["198"],"import React from 'react';\nimport classes from './googleAuthButton.module.scss';\n\nimport googleIcon from '../../../../../resources/icons/googleIcon.svg';\n\n\nconst GoogleAuthButton = ({text, onClickHandler}) => {\n    return (\n        <div \n            onClick = {onClickHandler}\n            className={classes.GoogleAuthButton}\n        >\n            <div className={classes.iconContainer}>\n                <img src={googleIcon} />\n            </div>\n            {text}\n        </div>\n    )\n}\n\nexport default GoogleAuthButton;","/home/rasmus/Documents/Coding/swift-writer/src/components/common/forms/formButtons/SubmitButton/SubmitButton.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/utility/sliderStyles.js",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/TestButton.jsx",[],"/home/rasmus/Documents/Coding/swift-writer/src/components/common/buttons/CustomButton.jsx",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":50,"column":8,"nodeType":"205","endLine":50,"endColumn":24,"suggestions":"206"},{"ruleId":"203","severity":1,"message":"204","line":43,"column":8,"nodeType":"205","endLine":43,"endColumn":24,"suggestions":"207"},{"ruleId":"203","severity":1,"message":"204","line":44,"column":8,"nodeType":"205","endLine":44,"endColumn":24,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":3,"column":8,"nodeType":"211","messageId":"212","endLine":3,"endColumn":14},{"ruleId":"209","severity":1,"message":"213","line":12,"column":8,"nodeType":"211","messageId":"212","endLine":12,"endColumn":21},{"ruleId":"209","severity":1,"message":"214","line":14,"column":8,"nodeType":"211","messageId":"212","endLine":14,"endColumn":27},{"ruleId":"203","severity":1,"message":"204","line":51,"column":8,"nodeType":"205","endLine":51,"endColumn":24,"suggestions":"215"},{"ruleId":"209","severity":1,"message":"216","line":10,"column":8,"nodeType":"211","messageId":"212","endLine":10,"endColumn":18},{"ruleId":"209","severity":1,"message":"217","line":14,"column":11,"nodeType":"211","messageId":"212","endLine":14,"endColumn":19},{"ruleId":"209","severity":1,"message":"218","line":23,"column":12,"nodeType":"211","messageId":"212","endLine":23,"endColumn":23},{"ruleId":"203","severity":1,"message":"204","line":47,"column":8,"nodeType":"205","endLine":47,"endColumn":24,"suggestions":"219"},{"ruleId":"209","severity":1,"message":"220","line":2,"column":8,"nodeType":"211","messageId":"212","endLine":2,"endColumn":15},{"ruleId":"209","severity":1,"message":"221","line":10,"column":26,"nodeType":"211","messageId":"212","endLine":10,"endColumn":41},{"ruleId":"222","severity":1,"message":"223","line":56,"column":13,"nodeType":"224","endLine":56,"endColumn":38},{"ruleId":"222","severity":1,"message":"223","line":55,"column":13,"nodeType":"224","endLine":55,"endColumn":39},{"ruleId":"209","severity":1,"message":"220","line":2,"column":8,"nodeType":"211","messageId":"212","endLine":2,"endColumn":15},{"ruleId":"225","severity":1,"message":"226","line":9,"column":20,"nodeType":"227","messageId":"228","endLine":9,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":11,"column":27,"nodeType":"227","messageId":"228","endLine":11,"endColumn":29},{"ruleId":"209","severity":1,"message":"229","line":3,"column":8,"nodeType":"211","messageId":"212","endLine":3,"endColumn":16},{"ruleId":"209","severity":1,"message":"220","line":2,"column":8,"nodeType":"211","messageId":"212","endLine":2,"endColumn":15},{"ruleId":"225","severity":1,"message":"226","line":10,"column":20,"nodeType":"227","messageId":"228","endLine":10,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":12,"column":27,"nodeType":"227","messageId":"228","endLine":12,"endColumn":29},{"ruleId":"222","severity":1,"message":"223","line":12,"column":20,"nodeType":"224","endLine":17,"endColumn":11},{"ruleId":"222","severity":1,"message":"223","line":19,"column":20,"nodeType":"224","endLine":24,"endColumn":11},{"ruleId":"203","severity":1,"message":"230","line":105,"column":8,"nodeType":"205","endLine":105,"endColumn":39,"suggestions":"231"},{"ruleId":"209","severity":1,"message":"232","line":17,"column":9,"nodeType":"211","messageId":"212","endLine":17,"endColumn":16},{"ruleId":"222","severity":1,"message":"223","line":14,"column":17,"nodeType":"224","endLine":14,"endColumn":41},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'headerText' and 'updateTime'. Either include them or remove the dependency array. You can also do a functional update 'setHeaderText(h => ...)' if you only need 'headerText' in the 'setHeaderText' call.","ArrayExpression",["235"],["236"],["237"],"no-unused-vars","'SWLogo' is defined but never used.","Identifier","unusedVar","'UsernameInput' is defined but never used.","'RepeatPasswordInput' is defined but never used.",["238"],"'TestButton' is defined but never used.","'currLang' is assigned a value but never used.","'showContent' is assigned a value but never used.",["239"],"'classes' is defined but never used.","'setUserLoggedIn' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Checkbox' is defined but never used.","React Hook useEffect has missing dependencies: 'updateTime' and 'welcomeText'. Either include them or remove the dependency array. You can also do a functional update 'setWelcomeText(w => ...)' if you only need 'welcomeText' in the 'setWelcomeText' call.",["240"],"'BGColor' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},{"desc":"241","fix":"243"},{"desc":"241","fix":"244"},{"desc":"241","fix":"245"},{"desc":"241","fix":"246"},{"desc":"247","fix":"248"},"Update the dependencies array to be: [charIdx, headerText, stops, updateTime]",{"range":"249","text":"250"},{"range":"251","text":"250"},{"range":"252","text":"250"},{"range":"253","text":"250"},{"range":"254","text":"250"},"Update the dependencies array to be: [charIdx, stops, playAnimation, updateTime, welcomeText]",{"range":"255","text":"256"},[2099,2115],"[charIdx, headerText, stops, updateTime]",[1565,1581],[1569,1585],[2157,2173],[1708,1724],[3523,3554],"[charIdx, stops, playAnimation, updateTime, welcomeText]"]