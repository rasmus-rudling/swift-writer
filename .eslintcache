[{"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\index.js":"1","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\App.js":"2","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\reportWebVitals.js":"3","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\MainMenu\\MainMenu.jsx":"4","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FeedbackPage\\FeedbackPage.jsx":"5","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\SignUpPage\\SignUpPage.jsx":"6","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FrontPage\\FrontPage.jsx":"7","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\practiceSets.js":"8","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\SecondaryButton\\SecondaryButton.jsx":"9","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\PrimaryButton\\PrimaryButton.jsx":"10","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FrontPage\\KeyboardContainer\\KeyboardContainer.jsx":"11","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FrontPage\\WelcomeAnimation\\WelcomeAnimation.jsx":"12","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Hands\\LeftHand\\LeftHand.jsx":"13","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Hands\\RightHand\\RightHand.jsx":"14","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Keyboards\\Swedish\\Windows\\SweWinKeyboard.jsx":"15","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Hands\\FingerIndicator\\FingerIndicator.jsx":"16","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\KeyBoard\\Keyboard.jsx":"17","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\KeyBoard\\Key\\Key.jsx":"18","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\findStopsInText.js":"19","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\wordsPerMinToUpdateTime.js":"20","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\TextMarker\\TextMarker.jsx":"21","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\FormContainer\\FormContainer.jsx":"22","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\ShortTextInput\\ShortTextInput.jsx":"23","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\FormButtons\\SubmitButton\\SubmitButton.jsx":"24","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\Divider\\Divider.jsx":"25","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\FormButtons\\GoogleAuthButton\\GoogleAuthButton.jsx":"26","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\SignInPage\\SignInPage.jsx":"27","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickPractisePage\\QuickPractisePage.jsx":"28","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickContestPage\\QuickContestPage.jsx":"29","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Checkboxes\\Checkboxes.jsx":"30","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Checkbox\\Checkbox.jsx":"31","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\RadioButton\\RadioButton.jsx":"32","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Slider\\CustomSlider1.jsx":"33","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\sliderStyles.js":"34","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Contexts\\LanguageContext.js":"35","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickPractisePage\\QuckPractiseSettings\\QuckPractiseSettings.jsx":"36","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickContestPage\\QuickContestSettings\\QuickContestSettings.jsx":"37","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\TestButton.jsx":"38","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\CustomButton.jsx":"39"},{"size":1040,"mtime":1612125362216,"results":"40","hashOfConfig":"41"},{"size":1867,"mtime":1612113009271,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":499162500000,"results":"43","hashOfConfig":"41"},{"size":2158,"mtime":1612300777774,"results":"44","hashOfConfig":"41"},{"size":2108,"mtime":1612809282339,"results":"45","hashOfConfig":"41"},{"size":3195,"mtime":1612106461567,"results":"46","hashOfConfig":"41"},{"size":6577,"mtime":1612303936169,"results":"47","hashOfConfig":"41"},{"size":993,"mtime":1611360375745,"results":"48","hashOfConfig":"41"},{"size":1059,"mtime":1611523420504,"results":"49","hashOfConfig":"41"},{"size":971,"mtime":1612300617219,"results":"50","hashOfConfig":"41"},{"size":3269,"mtime":1612116612899,"results":"51","hashOfConfig":"41"},{"size":736,"mtime":1612097090428,"results":"52","hashOfConfig":"41"},{"size":1770,"mtime":1612115888551,"results":"53","hashOfConfig":"41"},{"size":1776,"mtime":1612115948882,"results":"54","hashOfConfig":"41"},{"size":6915,"mtime":1612120124482,"results":"55","hashOfConfig":"41"},{"size":1664,"mtime":1611525735522,"results":"56","hashOfConfig":"41"},{"size":1792,"mtime":1612118668899,"results":"57","hashOfConfig":"41"},{"size":6256,"mtime":1612120059940,"results":"58","hashOfConfig":"41"},{"size":253,"mtime":1611616978070,"results":"59","hashOfConfig":"41"},{"size":546,"mtime":1611617024431,"results":"60","hashOfConfig":"41"},{"size":561,"mtime":1611680586725,"results":"61","hashOfConfig":"41"},{"size":1234,"mtime":1612094902997,"results":"62","hashOfConfig":"41"},{"size":636,"mtime":1612100325907,"results":"63","hashOfConfig":"41"},{"size":336,"mtime":1611780967927,"results":"64","hashOfConfig":"41"},{"size":347,"mtime":1611776869169,"results":"65","hashOfConfig":"41"},{"size":543,"mtime":1611782166335,"results":"66","hashOfConfig":"41"},{"size":3106,"mtime":1612111464895,"results":"67","hashOfConfig":"41"},{"size":1977,"mtime":1612125043630,"results":"68","hashOfConfig":"41"},{"size":1966,"mtime":1612125280638,"results":"69","hashOfConfig":"41"},{"size":338,"mtime":1612096520100,"results":"70","hashOfConfig":"41"},{"size":1005,"mtime":1612110382979,"results":"71","hashOfConfig":"41"},{"size":1394,"mtime":1612111180291,"results":"72","hashOfConfig":"41"},{"size":971,"mtime":1612105090519,"results":"73","hashOfConfig":"41"},{"size":594,"mtime":1612104471094,"results":"74","hashOfConfig":"41"},{"size":823,"mtime":1612112965661,"results":"75","hashOfConfig":"41"},{"size":9357,"mtime":1612125095216,"results":"76","hashOfConfig":"41"},{"size":3242,"mtime":1612125279348,"results":"77","hashOfConfig":"41"},{"size":493,"mtime":1612808659214,"results":"78","hashOfConfig":"41"},{"size":310,"mtime":1612303994260,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"xsmglz",{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"82"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\index.js",[],["177","178"],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\App.js",["179"],"import './App.css';\nimport classes from './app.module.scss';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport MainMenu from './Components/MainMenu/MainMenu';\nimport FrontPage from './Components/Pages/FrontPage/FrontPage';\nimport SignInPage from './Components/Pages/SignInPage/SignInPage';\nimport SignUpPage from './Components/Pages/SignUpPage/SignUpPage';\nimport QuickPractisePage from './Components/Pages/QuickPractisePage/QuickPractisePage';\nimport QuickContestPage from './Components/Pages/QuickContestPage/QuickContestPage';\nimport FeedbackPage from './Components/Pages/FeedbackPage/FeedbackPage';\n\nimport LanguageProvider from './Contexts/LanguageContext';\n\nfunction App() {\n    return (\n        <LanguageProvider>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <MainMenu />\n                        <FrontPage />\n                    </Route>\n\n                    <Route exact path=\"/sign-in\">\n                        <MainMenu />\n                        <SignInPage />\n                    </Route>\n\n                    <Route exact path=\"/sign-up\">\n                        <MainMenu />\n                        <SignUpPage />\n                    </Route>\n\n                    <Route exact path=\"/practise\">\n                        <MainMenu />\n                        <QuickPractisePage />\n                    </Route>\n\n                    <Route exact path=\"/contestPage\">\n                        <MainMenu />\n                        <QuickContestPage />\n                    </Route>\n\n                    <Route exact path=\"/feedback\">\n                        <MainMenu />\n                        <FeedbackPage />\n                    </Route>\n                </Switch>\n            </Router>\n        </LanguageProvider>\n    );\n}\n\nexport default App;\n","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\reportWebVitals.js",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\MainMenu\\MainMenu.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FeedbackPage\\FeedbackPage.jsx",["180","181","182"],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\SignUpPage\\SignUpPage.jsx",["183"],"import React, { useState, useEffect} from 'react';\r\nimport classes from './signUpPage.module.scss';\r\n\r\nimport findStopsInText from '../../Utility/findStopsInText';\r\nimport wordsPerMinToUpdateTime from '../../Utility/wordsPerMinToUpdateTime';\r\n\r\nimport TextMarker from '../../Common/TextMarker/TextMarker';\r\n\r\nimport SignUpForm from '../../Common/Forms/FormContainer/FormContainer';\r\nimport EmailInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport UsernameInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport PasswordInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport RepeatPasswordInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport SubmitButton from '../../Common/Forms/FormButtons/SubmitButton/SubmitButton';\r\nimport OrDivider from '../../Common/Forms/Divider/Divider';\r\nimport GoogleSignUpButton from '../../Common/Forms/FormButtons/GoogleAuthButton/GoogleAuthButton';\r\n\r\nconst SignUpPage = () => {\r\n    const fullHeaderText = \"Sign Up\";\r\n    const updateTime = wordsPerMinToUpdateTime(75, fullHeaderText);\r\n    \r\n    const [headerText, setHeaderText] = useState(\" \");\r\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\r\n    const [charIdx, setCharIdx] = useState(0);\r\n    const [animationFinished, setAnimationFinished] = useState(false);\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (stops.includes(charIdx)) {\r\n                let tempStops = [...stops];\r\n                tempStops.shift();\r\n                setStops(tempStops);\r\n            } else if (charIdx < fullHeaderText.length) {\r\n                let newChar = fullHeaderText.charAt(charIdx);\r\n\r\n                if (charIdx === 0) {\r\n                    setHeaderText(newChar);\r\n                } else {\r\n                    setHeaderText(headerText.concat(newChar));\r\n                }\r\n                \r\n                setCharIdx(charIdx + 1);\r\n            } else {\r\n                setAnimationFinished(true);\r\n            }\r\n        }, updateTime);\r\n\r\n        setShowContent(true);\r\n    }, [charIdx, stops]);\r\n    \r\n\r\n    return (\r\n        <div className={classes.SignUpPage}>\r\n            <h1>\r\n                {headerText}\r\n                <TextMarker hide={animationFinished} />\r\n            </h1>\r\n\r\n            <SignUpForm \r\n                show = {showContent}\r\n            >\r\n                <EmailInput inputName = \"Email\" />\r\n                <UsernameInput inputName = \"Username\" />\r\n                <PasswordInput inputName = \"Password\" inputType=\"password\"/>\r\n                <RepeatPasswordInput inputName = \"Repeat Password\" inputType=\"password\"/>\r\n\r\n                <SubmitButton \r\n                    text = \"Create free account\"\r\n                    // onChange = {e => e.preventDefault()}\r\n                />\r\n                <OrDivider text=\"or\" />\r\n                <GoogleSignUpButton\r\n                    text=\"Sign up with Google\"\r\n                    onClick = {() => console.log(\"User wants to sign up with Google!\")}\r\n                />\r\n            </SignUpForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpPage;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FrontPage\\FrontPage.jsx",["184"],"import React, { useState, useEffect } from 'react';\r\nimport classes from './frontPage.module.scss';\r\n\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\nimport KeyboardContainer from './KeyboardContainer/KeyboardContainer';\r\nimport WelcomeAnimation from './WelcomeAnimation/WelcomeAnimation';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport PlayIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\n\r\nimport findStopsInText from '../../Utility/findStopsInText';\r\nimport wordsPerMinToUpdateTime from '../../Utility/wordsPerMinToUpdateTime';\r\n\r\n\r\nconst PrettoSlider = withStyles({\r\n    root: {\r\n      color: '#FE6E6E',\r\n      height: 10,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: '#fff',\r\n      border: '3px solid currentColor',\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 2px)',\r\n    },\r\n    track: {\r\n      height: 8,\r\n      borderRadius: 0,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 0,\r\n    },\r\n  })(Slider);\r\n\r\nconst FrontPage = () => {\r\n    const activateKeyHandler = (keyToActivate) => {\r\n        setActiveKey(keyToActivate);\r\n    }\r\n\r\n    const fullWelcomeText = \"Welcome to SwiftWriter - an application made to help you type fast and properly!\";\r\n    const [welcomeText, setWelcomeText] = useState(\" \");\r\n    const [charIdx, setCharIdx] = useState(0);\r\n    const [stops, setStops] = useState(findStopsInText(fullWelcomeText));\r\n    const [wordsPerMinute, setWordsPerMinute] = useState(5);\r\n    const [updateTime, setUpdateTime] = useState(wordsPerMinToUpdateTime(wordsPerMinute, fullWelcomeText));\r\n    const [activeKey, setActiveKey] = useState();\r\n    const [allKeysActive, setAllKeysActive] = useState(true);\r\n    const [playAnimation, setPlayAnimation] = useState(true);\r\n    const [animationFinished, setAnimationFinished] = useState(false);\r\n\r\n    const allKeysActiveHandler = () => {\r\n        setAllKeysActive(!allKeysActive);\r\n    };\r\n\r\n    const animationPlayingHandler = () => {\r\n        setPlayAnimation(!playAnimation);\r\n    };\r\n\r\n    const getWordsPerMinute = (newWordsPerMinute) => {\r\n        setWordsPerMinute(newWordsPerMinute);\r\n        setUpdateTime(wordsPerMinToUpdateTime(newWordsPerMinute, fullWelcomeText));\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (playAnimation) {\r\n                if (stops.includes(charIdx)) {\r\n                    let tempStops = [...stops];\r\n                    tempStops.shift();\r\n                    setStops(tempStops);\r\n                } else if (charIdx < fullWelcomeText.length) {\r\n                    let newChar = fullWelcomeText.charAt(charIdx);\r\n                    activateKeyHandler(newChar);\r\n\r\n                    if (charIdx === 0) {\r\n                        setWelcomeText(newChar);\r\n                    } else {\r\n                        setWelcomeText(welcomeText.concat(newChar));\r\n                    }\r\n                    \r\n                    setCharIdx(charIdx + 1);\r\n                } else {\r\n                    setAnimationFinished(true);\r\n                    setTimeout(() => {\r\n                        setWelcomeText(\" \");\r\n                        setCharIdx(0);\r\n                        setAnimationFinished(false);\r\n                    }, 2000);\r\n                }\r\n            }\r\n        }, updateTime);\r\n    }, [charIdx, stops, playAnimation]);\r\n\r\n    return (\r\n        <div className={classes.FrontPage}>\r\n            {/* <div>Solna weather: {weatherInSolna}</div> */}\r\n\r\n            \r\n\r\n            <WelcomeAnimation \r\n                welcomeText = {welcomeText}\r\n                animationFinished = {animationFinished}\r\n                playAnimation = {playAnimation}\r\n            />\r\n\r\n            <PrettoSlider\r\n                defaultValue={wordsPerMinute}\r\n                getAriaValueText={getWordsPerMinute}\r\n                aria-labelledby=\"discrete-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                step={5}\r\n                marks\r\n                min={5}\r\n                max={100}\r\n                style= {{\r\n                    \"width\": \"500px\",\r\n                    \"margin\": \"20px auto 10px auto\"\r\n                }}\r\n            />\r\n\r\n            <p>Words per minute: <strong style={{\"color\":\"#FE6E6E\"}}>{wordsPerMinute}</strong></p>\r\n\r\n            <KeyboardContainer \r\n                keyboardType = \"swe-win\"\r\n                activeKey = {activeKey}\r\n                updateTime = {updateTime}\r\n                allKeysActive = {allKeysActive}\r\n            />\r\n            \r\n            <div className={classes.settings}>\r\n                <div className={classes.setting}>\r\n                    <mark className={classes.mappingText}>Animation</mark>\r\n                    <ToggleButtonGroup\r\n                        value={playAnimation}\r\n                        exclusive\r\n                        onChange={animationPlayingHandler}\r\n                        style = {{\r\n                            \"margin\": \"0 auto\"\r\n                        }}\r\n                    >\r\n                        <ToggleButton value={true}>\r\n                            <PlayIcon />\r\n                        </ToggleButton>\r\n\r\n                        <ToggleButton value={false}>\r\n                            <PauseIcon />\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n                \r\n                <div className={classes.setting}>\r\n                    <mark className={classes.mappingText}>Key-finger mapping</mark>\r\n                    <ToggleButtonGroup\r\n                        value={allKeysActive}\r\n                        exclusive\r\n                        onChange={allKeysActiveHandler}\r\n                        style = {{\r\n                            \"margin\": \"0 auto\"\r\n                        }}\r\n                    >\r\n                        <ToggleButton value={true}>\r\n                            <div>Show</div>\r\n                        </ToggleButton>\r\n                        <ToggleButton value={false}>\r\n                            <div>Hide</div>\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FrontPage;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\practiceSets.js",[],["185","186"],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\SecondaryButton\\SecondaryButton.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\PrimaryButton\\PrimaryButton.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FrontPage\\KeyboardContainer\\KeyboardContainer.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\FrontPage\\WelcomeAnimation\\WelcomeAnimation.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Hands\\LeftHand\\LeftHand.jsx",["187"],"import React from 'react';\r\nimport classes from './leftHand.module.scss';\r\n\r\nimport leftHandImg from '../../../Resources/Images/leftHand.png';\r\nimport FingerIndicator from '../FingerIndicator/FingerIndicator';\r\n\r\nconst LeftHand = ({highlightedFingers, updateTime, extraClass}) => {\r\n    let handClasses = [classes.LeftHand];\r\n\r\n    if (extraClass !== undefined) {\r\n        handClasses.push(extraClass);\r\n    }\r\n\r\n    return (\r\n        <div className={handClasses.join(\" \")}>\r\n            <FingerIndicator \r\n                color=\"red\" \r\n                top = \"50px\"\r\n                left = \"-11px\"\r\n                show = {highlightedFingers[\"pinkyL\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"blue\" \r\n                top = \"-2px\"\r\n                left = \"28px\"\r\n                show = {highlightedFingers[\"ringL\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"orange\" \r\n                top = \"-10px\"\r\n                left = \"72px\"\r\n                show = {highlightedFingers[\"middleL\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"green\" \r\n                top = \"0px\"\r\n                left = \"116px\"\r\n                show = {highlightedFingers[\"indexL\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"purple\" \r\n                top = \"100px\"\r\n                left = \"175px\"\r\n                show = {highlightedFingers[\"thumbL\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <img src={leftHandImg} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeftHand;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Hands\\RightHand\\RightHand.jsx",["188"],"import React from 'react';\r\nimport classes from './rightHand.module.scss';\r\nimport rightHandImg from '../../../Resources/Images/rightHand.png';\r\n\r\nimport FingerIndicator from '../FingerIndicator/FingerIndicator';\r\n\r\nconst RightHand = ({highlightedFingers, updateTime, extraClass}) => {\r\n    let handClasses = [classes.RightHand];\r\n\r\n    if (extraClass !== undefined) {\r\n        handClasses.push(extraClass);\r\n    }\r\n    return (\r\n        <div className={handClasses.join(\" \")}>\r\n            <FingerIndicator \r\n                color=\"purple\" \r\n                top = \"98px\"\r\n                left = \"41px\"\r\n                show = {highlightedFingers[\"thumbR\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"red\" \r\n                top = \"-2px\"\r\n                left = \"101px\"\r\n                show = {highlightedFingers[\"indexR\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"blue\" \r\n                top = \"-10px\"\r\n                left = \"145px\"\r\n                show = {highlightedFingers[\"middleR\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"orange\" \r\n                top = \"-1px\"\r\n                left = \"189px\"\r\n                show = {highlightedFingers[\"ringR\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <FingerIndicator \r\n                color=\"green\" \r\n                top = \"50px\"\r\n                left = \"228px\"\r\n                show = {highlightedFingers[\"pinkyR\"]}\r\n                updateTime = {updateTime}\r\n            />\r\n\r\n            <img src={rightHandImg} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RightHand;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Keyboards\\Swedish\\Windows\\SweWinKeyboard.jsx",["189"],"import React from 'react';\r\nimport classes from './sweWinKeyboard.module.scss';\r\n\r\nimport Keyboard from '../../../KeyBoard/Keyboard';\r\n\r\nconst SweWinKeyboard = ({\r\n    keyEnter, \r\n    keyLeave, \r\n    clearIndicators, \r\n    activeKey,\r\n    updateTime,\r\n    allKeysActive,\r\n    extraClass\r\n}) => {\r\n    const defaultWidth = '50px';\r\n    let sweWinKeys = [\r\n        [\r\n            {\"char\":'§', \"shiftChar\":'½', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\r\n            {\"char\":'1', \"shiftChar\":'!', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\r\n            {\"char\":'2', \"shiftChar\":'\"', \"altGrChar\":'@', \"width\":defaultWidth, \"finger\":\"ringL\"},\r\n            {\"char\":'3', \"shiftChar\":'#', \"altGrChar\":'£', \"width\":defaultWidth, \"finger\":\"middleL\"},\r\n            {\"char\":'4', \"shiftChar\":'¤', \"altGrChar\":'$', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":'5', \"shiftChar\":'%', \"altGrChar\":'€', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":'6', \"shiftChar\":'&', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":'7', \"shiftChar\":'/', \"altGrChar\":'{', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":'8', \"shiftChar\":'(', \"altGrChar\":'[', \"width\":defaultWidth, \"finger\":\"middleR\"},\r\n            {\"char\":'9', \"shiftChar\":')', \"altGrChar\":']', \"width\":defaultWidth, \"finger\":\"ringR\"},\r\n            {\"char\":'0', \"shiftChar\":'=', \"altGrChar\":'}', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":'+', \"shiftChar\":'?', \"altGrChar\":'\\\\', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":'´', \"shiftChar\":'`', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":\"← Back\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyR\"}\r\n        ],\r\n        [\r\n            {\"char\":'Tab ↹', \"shiftChar\":'', \"altGrChar\":'', \"width\":\"75px\", \"finger\":\"pinkyL\"},\r\n            {\"char\":'Q', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\r\n            {\"char\":'W', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringL\"},\r\n            {\"char\":'E', \"shiftChar\":'', \"altGrChar\":'€', \"width\":defaultWidth, \"finger\":\"middleL\"},\r\n            {\"char\":'R', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":'T', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":'Y', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":'U', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":'I', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleR\"},\r\n            {\"char\":'O', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringR\"},\r\n            {\"char\":'P', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":'Å', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":'¨', \"shiftChar\":'^', \"altGrChar\":'~', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n        ], \r\n        [\r\n            {\"char\":'CapsLock', \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyL\"},\r\n            {\"char\":'A', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\r\n            {\"char\":'S', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringL\"},\r\n            {\"char\":'D', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleL\"},\r\n            {\"char\":'F', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":'G', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":'H', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":'J', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":'K', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleR\"},\r\n            {\"char\":'L', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringR\"},\r\n            {\"char\":'Ö', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":'Ä', \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":\"'\", \"shiftChar\":'*', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":\"↲ Enter\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"75px\", \"finger\":\"pinkyR\"}\r\n        ],\r\n        [\r\n            {\"char\":\"⇧ Shift\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"75px\", \"finger\":\"pinkyL\"},\r\n            {\"char\":\"<\", \"shiftChar\":'>', \"altGrChar\":'|', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\r\n            {\"char\":\"Z\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyL\"},\r\n            {\"char\":\"Z\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringL\"},\r\n            {\"char\":\"C\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleL\"},\r\n            {\"char\":\"V\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":\"B\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexL\"},\r\n            {\"char\":\"N\", \"shiftChar\":'', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":\"M\", \"shiftChar\":'', \"altGrChar\":'µ', \"width\":defaultWidth, \"finger\":\"indexR\"},\r\n            {\"char\":\",\", \"shiftChar\":';', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"middleR\"},\r\n            {\"char\":\".\", \"shiftChar\":':', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"ringR\"},\r\n            {\"char\":\"-\", \"shiftChar\":'_', \"altGrChar\":'', \"width\":defaultWidth, \"finger\":\"pinkyR\"},\r\n            {\"char\":\"⇧ Shift\", \"shiftChar\":'_', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyR\"},\r\n        ],\r\n        [\r\n            {\"char\":\"Ctrl\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyL\"},\r\n            {\"char\":\"win\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"51px\", \"finger\":\"pinkyL\"},\r\n            {\"char\":\"Alt\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyL\"},\r\n            {\"char\":\"Space\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"350px\", \"finger\":\"thumbR\"},\r\n            {\"char\":\"Alt Gr\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"ringR\"},\r\n            {\"char\":\"Fn\", \"shiftChar\":'', \"altGrChar\":'', \"width\":\"85px\", \"finger\":\"pinkyR\"},\r\n        ]\r\n    ];\r\n\r\n    return (\r\n        <Keyboard \r\n            keys = {sweWinKeys}\r\n            keyEnter = {keyEnter}\r\n            keyLeave = {keyLeave}\r\n            clearIndicators = {clearIndicators}\r\n            activeKey = {activeKey}\r\n            updateTime = {updateTime}\r\n            allKeysActive = {allKeysActive}\r\n            extraClass = {extraClass}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SweWinKeyboard;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Hands\\FingerIndicator\\FingerIndicator.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\KeyBoard\\Keyboard.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\KeyBoard\\Key\\Key.jsx",["190"],"import React from 'react';\r\nimport classes from './key.module.scss';\r\n\r\nconst Key = ({\r\n    char, \r\n    shiftChar, \r\n    altChar, \r\n    width, \r\n    finger, \r\n    keyLeave,\r\n    keyEnter,\r\n    updateTime,\r\n    allKeysActive,\r\n    active=false\r\n}) => {\r\n    let keyWidth, \r\n        BGColor, \r\n        borderColor,\r\n        hasMarker,\r\n        keyMarkerClass,\r\n        activeKeyColor,\r\n        keyClasses;\r\n    \r\n    const fingerColorMap = {\r\n        \"pinkyL\": \"red\",\r\n        \"ringL\": \"blue\",\r\n        \"middleL\": \"orange\",\r\n        \"indexL\": \"green\",\r\n        \"thumbL\": \"purple\",\r\n        \"thumbR\": \"purple\",\r\n        \"indexR\": \"red\",\r\n        \"middleR\": \"blue\",\r\n        \"ringR\": \"orange\",\r\n        \"pinkyR\": \"green\",\r\n    };\r\n\r\n    activeKeyColor = fingerColorMap[finger];\r\n    keyClasses = [classes.Key];\r\n\r\n    if (activeKeyColor === \"red\") {\r\n        if (allKeysActive && active) {\r\n            keyClasses.push(classes.redActive);\r\n            borderColor = \"#BF5252\";\r\n        } else if (allKeysActive) {\r\n            keyClasses.push(classes.redKey);\r\n            borderColor = \"#BF5252\";\r\n        } else if (!active) {\r\n            keyClasses.push(classes.inActiveKey, classes.redHover);\r\n            borderColor = \"#777777\";\r\n        } else {\r\n            keyClasses.push(classes.redKey);\r\n            borderColor = \"#BF5252\";\r\n        }\r\n    } else if (activeKeyColor === \"blue\") {\r\n        if (allKeysActive && active) {\r\n            keyClasses.push(classes.blueActive);\r\n            borderColor = \"#5289BF\";\r\n        } else if (allKeysActive) {\r\n            keyClasses.push(classes.blueKey);\r\n            borderColor = \"#5289BF\";\r\n        } else if (!active) {\r\n            keyClasses.push(classes.inActiveKey, classes.blueHover);\r\n            borderColor = \"#777777\";\r\n        } else {\r\n            keyClasses.push(classes.blueKey);\r\n            borderColor = \"#5289BF\";\r\n        }\r\n    }  else if (activeKeyColor === \"green\") {\r\n        if (allKeysActive && active) {\r\n            keyClasses.push(classes.greenActive);\r\n            borderColor = \"#439957\";\r\n        } else if (allKeysActive) {\r\n            keyClasses.push(classes.greenKey);\r\n            borderColor = \"#439957\";\r\n        } else if (!active) {\r\n            keyClasses.push(classes.inActiveKey, classes.greenHover);\r\n            borderColor = \"#777777\";\r\n        } else {\r\n            keyClasses.push(classes.greenKey);\r\n            borderColor = \"#439957\";\r\n        }\r\n    }  else if (activeKeyColor === \"orange\") {\r\n        if (allKeysActive && active) {\r\n            keyClasses.push(classes.orangeActive);\r\n            borderColor = \"#BF9452\";\r\n        } else if (allKeysActive) {\r\n            keyClasses.push(classes.orangeKey);\r\n            borderColor = \"#BF9452\";\r\n        } else if (!active) {\r\n            keyClasses.push(classes.inActiveKey, classes.orangeHover);\r\n            borderColor = \"#777777\";\r\n        } else {\r\n            keyClasses.push(classes.orangeKey);\r\n            borderColor = \"#BF9452\";\r\n        }\r\n    }  else if (activeKeyColor === \"purple\") {\r\n        if (allKeysActive && active) {\r\n            keyClasses.push(classes.purpleActive);\r\n            borderColor = \"#9752BF\";\r\n        } else if (allKeysActive) {\r\n            keyClasses.push(classes.purpleKey);\r\n            borderColor = \"#9752BF\";\r\n        } else if (!active) {\r\n            keyClasses.push(classes.inActiveKey, classes.purpleHover);\r\n            borderColor = \"#777777\";\r\n        } else {\r\n            keyClasses.push(classes.purpleKey);\r\n            borderColor = \"#9752BF\";\r\n        }\r\n    } else {\r\n        if (allKeysActive && active) {\r\n            keyClasses.push(classes.grayActive);\r\n            borderColor = \"#777777\";\r\n        } else if (allKeysActive) {\r\n            keyClasses.push(classes.grayKey);\r\n            borderColor = \"#777777\";\r\n        } else if (!active) {\r\n            keyClasses.push(classes.inActiveKey, classes.grayHover);\r\n            borderColor = \"#777777\";\r\n        } else {\r\n            keyClasses.push(classes.grayKey);\r\n            borderColor = \"#777777\";\r\n        }\r\n    }\r\n\r\n    if (width === undefined) {\r\n        keyWidth = \"50px\";\r\n    } else {\r\n        keyWidth = width;\r\n    }\r\n\r\n    if ('FfJj'.includes(char)) {\r\n        hasMarker = true;\r\n    } else {\r\n        hasMarker = false;\r\n    }\r\n\r\n    if (hasMarker) {\r\n        keyMarkerClass = classes.marker;\r\n    } else {\r\n        keyMarkerClass = classes.hide;\r\n    }\r\n\r\n    let transitionTime;\r\n\r\n    if (updateTime > 150) {\r\n        transitionTime = Math.sqrt(updateTime) / 100;\r\n    } else {\r\n        transitionTime = \"none\";\r\n    }\r\n\r\n    let topLeft = \"\", \r\n        topRight = \"\",\r\n        bottomLeft = \"\", \r\n        bottomRight = \"\";\r\n\r\n    if (\"0123456789<,.-§¨'\".includes(char)) {\r\n        bottomLeft = char;\r\n        topLeft = shiftChar;\r\n        bottomRight = altChar;\r\n    } else {\r\n        topLeft = char;\r\n        bottomLeft = shiftChar; // Måste lösa detta, bara stora bokstäver ska synas på tangentbordet\r\n        bottomRight = altChar;\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={keyClasses.join(\" \")}\r\n            style={{\r\n                \"width\": keyWidth,\r\n                \"transition\": transitionTime\r\n            }}\r\n            onMouseEnter={() => keyEnter(finger)}\r\n            onMouseLeave={() => keyLeave()}\r\n        >\r\n            {\r\n                keyWidth !== \"50px\"\r\n                  ? <div>{char}</div>\r\n                  : <div>\r\n                        <div className={classes.topRow}>\r\n                            {topLeft === \"\" ? <div></div> : <div>{topLeft}</div>}\r\n                            {topRight === \"\" ? <div></div> : <div>{topRight}</div>}\r\n                        </div>\r\n                        <div className={classes.bottomRow}>\r\n                            {bottomLeft === \"\" ? <div></div> : <div>{bottomLeft}</div>}\r\n                            {bottomRight === \"\" ? <div></div> : <div>{bottomRight}</div>}\r\n                        </div>\r\n                    </div>\r\n            }\r\n            <div \r\n                className={keyMarkerClass}\r\n                style={{\r\n                    \"backgroundColor\": borderColor\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Key;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\findStopsInText.js",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\wordsPerMinToUpdateTime.js",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\TextMarker\\TextMarker.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\FormContainer\\FormContainer.jsx",["191","192"],"import React from 'react';\r\nimport classes from './formContainer.module.scss';\r\n\r\nimport SWLogo from '../../../../Resources/Icons/SWLogo.svg';\r\n\r\nconst FormContainer = ({show, children, logo, width=\"auto\"}) => {\r\n    let formLogo = null;\r\n\r\n    if (logo === \"none\") {\r\n        formLogo = null;\r\n    } else if (logo !== undefined) {\r\n        formLogo = <img \r\n            src={logo} \r\n            style = {{\r\n                \"marginBottom\": \"20px\"\r\n            }}\r\n        />\r\n    } else {\r\n        formLogo = <img \r\n            src={SWLogo} \r\n            style = {{\r\n                \"marginBottom\": \"20px\"\r\n            }}\r\n        />\r\n    }\r\n\r\n    let formClasses = [classes.FormContainer];\r\n\r\n    if (!show) {\r\n        formClasses.push(classes.hideForm);\r\n    }\r\n\r\n    if (width !== \"auto\") {\r\n\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={formClasses.join(\" \")}\r\n            style = {{\r\n                \"marginTop\": logo === \"none\" ? \"20px\" : \"60px\",\r\n                \"paddingTop\": logo === \"none\" ? \"20px\" : \"0\",\r\n                \"width\": width !== \"auto\" ? width : \"fitContent\"\r\n            }}\r\n        >\r\n            {formLogo}\r\n\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormContainer;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\ShortTextInput\\ShortTextInput.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\FormButtons\\SubmitButton\\SubmitButton.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\Divider\\Divider.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Forms\\FormButtons\\GoogleAuthButton\\GoogleAuthButton.jsx",["193"],"import React from 'react';\r\nimport classes from './googleAuthButton.module.scss';\r\n\r\nimport googleIcon from '../../../../../Resources/Icons/googleIcon.svg';\r\n\r\n\r\nconst GoogleAuthButton = ({text, onClickHandler}) => {\r\n    return (\r\n        <div \r\n            onClick = {onClickHandler}\r\n            className={classes.GoogleAuthButton}\r\n        >\r\n            <div className={classes.iconContainer}>\r\n                <img src={googleIcon} />\r\n            </div>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GoogleAuthButton;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\SignInPage\\SignInPage.jsx",["194","195","196","197"],"import React, { useState, useEffect} from 'react';\r\nimport classes from './signInPage.module.scss';\r\nimport SWLogo from '../../../Resources/Icons/SWLogo.svg';\r\n\r\nimport findStopsInText from '../../Utility/findStopsInText';\r\nimport wordsPerMinToUpdateTime from '../../Utility/wordsPerMinToUpdateTime';\r\n\r\nimport TextMarker from '../../Common/TextMarker/TextMarker';\r\n\r\nimport SignInForm from '../../Common/Forms/FormContainer/FormContainer';\r\nimport EmailInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport UsernameInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport PasswordInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport RepeatPasswordInput from '../../Common/Forms/ShortTextInput/ShortTextInput';\r\nimport SubmitButton from '../../Common/Forms/FormButtons/SubmitButton/SubmitButton';\r\nimport OrDivider from '../../Common/Forms/Divider/Divider';\r\nimport GoogleSignUpButton from '../../Common/Forms/FormButtons/GoogleAuthButton/GoogleAuthButton';\r\n\r\nconst SignUpPage = () => {\r\n    const fullHeaderText = \"Sign In\";\r\n    const updateTime = wordsPerMinToUpdateTime(75, fullHeaderText);\r\n    \r\n    const [headerText, setHeaderText] = useState(\" \");\r\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\r\n    const [charIdx, setCharIdx] = useState(0);\r\n    const [animationFinished, setAnimationFinished] = useState(false);\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (stops.includes(charIdx)) {\r\n                let tempStops = [...stops];\r\n                tempStops.shift();\r\n                setStops(tempStops);\r\n            } else if (charIdx < fullHeaderText.length) {\r\n                let newChar = fullHeaderText.charAt(charIdx);\r\n\r\n                if (charIdx === 0) {\r\n                    setHeaderText(newChar);\r\n                } else {\r\n                    setHeaderText(headerText.concat(newChar));\r\n                }\r\n                \r\n                setCharIdx(charIdx + 1);\r\n            } else {\r\n                setAnimationFinished(true);\r\n            }\r\n        }, updateTime);\r\n\r\n        setShowContent(true);\r\n    }, [charIdx, stops]);\r\n    \r\n\r\n    return (\r\n        <div className={classes.SignInPage}>\r\n            <h1>\r\n                {headerText}\r\n                <TextMarker hide={animationFinished} />\r\n            </h1>\r\n\r\n            <SignInForm \r\n                show = {showContent}\r\n            >\r\n                <EmailInput inputName = \"Email or Username\" />\r\n                <PasswordInput inputName = \"Password\" inputType=\"password\" />\r\n\r\n                <SubmitButton \r\n                    text = \"Sign in\"\r\n                    // onChange = {e => e.preventDefault()}\r\n                />\r\n                <OrDivider text=\"or\" />\r\n                <GoogleSignUpButton\r\n                    text=\"Sign in with Google\"\r\n                    onClick = {() => console.log(\"User wants to sign in with Google!\")}\r\n                />\r\n            </SignInForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpPage;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickPractisePage\\QuickPractisePage.jsx",["198"],"import React, {useEffect, useState} from 'react';\r\nimport classes from './quickPractisePage.module.scss';\r\n\r\nimport findStopsInText from '../../Utility/findStopsInText';\r\nimport wordsPerMinToUpdateTime from '../../Utility/wordsPerMinToUpdateTime';\r\n\r\nimport TextMarker from '../../Common/TextMarker/TextMarker';\r\nimport QuickPractiseSettings from './QuckPractiseSettings/QuckPractiseSettings';\r\n\r\n\r\nconst QuickPractisePage = () => {\r\n    const fullHeaderText = \"Quick Practise\";\r\n    const updateTime = wordsPerMinToUpdateTime(55, fullHeaderText);\r\n    \r\n    const [headerText, setHeaderText] = useState(\" \");\r\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\r\n    const [charIdx, setCharIdx] = useState(0);\r\n    const [animationFinished, setAnimationFinished] = useState(false);\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (stops.includes(charIdx)) {\r\n                let tempStops = [...stops];\r\n                tempStops.shift();\r\n                setStops(tempStops);\r\n            } else if (charIdx < fullHeaderText.length) {\r\n                let newChar = fullHeaderText.charAt(charIdx);\r\n\r\n                if (charIdx === 0) {\r\n                    setHeaderText(newChar);\r\n                } else {\r\n                    setHeaderText(headerText.concat(newChar));\r\n                }\r\n                \r\n                setCharIdx(charIdx + 1);\r\n            } else {\r\n                setAnimationFinished(true);\r\n            }\r\n        }, updateTime);\r\n\r\n        setShowContent(true);\r\n    }, [charIdx, stops]);\r\n\r\n    return (\r\n        <div className={classes.QuickPractisePage}>\r\n            <h1>\r\n                {headerText}\r\n                <TextMarker hide={animationFinished} />\r\n            </h1>\r\n            <QuickPractiseSettings \r\n                showForm = {showContent}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuickPractisePage;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickContestPage\\QuickContestPage.jsx",["199"],"import React, {useEffect, useState} from 'react';\r\nimport classes from './quickContestPage.module.scss';\r\n\r\nimport findStopsInText from '../../Utility/findStopsInText';\r\nimport wordsPerMinToUpdateTime from '../../Utility/wordsPerMinToUpdateTime';\r\n\r\nimport TextMarker from '../../Common/TextMarker/TextMarker';\r\nimport QuickContestSettings from './QuickContestSettings/QuickContestSettings';\r\n\r\nconst QuickContestPage = () => {\r\n    const fullHeaderText = \"Quick Contest\";\r\n    const updateTime = wordsPerMinToUpdateTime(55, fullHeaderText);\r\n    \r\n    const [headerText, setHeaderText] = useState(\" \");\r\n    const [stops, setStops] = useState(findStopsInText(fullHeaderText));\r\n    const [charIdx, setCharIdx] = useState(0);\r\n    const [animationFinished, setAnimationFinished] = useState(false);\r\n    const [showContent, setShowContent] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (stops.includes(charIdx)) {\r\n                let tempStops = [...stops];\r\n                tempStops.shift();\r\n                setStops(tempStops);\r\n            } else if (charIdx < fullHeaderText.length) {\r\n                let newChar = fullHeaderText.charAt(charIdx);\r\n\r\n                if (charIdx === 0) {\r\n                    setHeaderText(newChar);\r\n                } else {\r\n                    setHeaderText(headerText.concat(newChar));\r\n                }\r\n                \r\n                setCharIdx(charIdx + 1);\r\n            } else {\r\n                setAnimationFinished(true);\r\n            }\r\n        }, updateTime);\r\n\r\n        setShowContent(true);\r\n    }, [charIdx, stops]);\r\n\r\n    return (\r\n        <div className={classes.QuickContestPage}>\r\n            <h1>\r\n                {headerText}\r\n                <TextMarker hide={animationFinished} />\r\n            </h1>\r\n            <QuickContestSettings \r\n                showForm = {showContent}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuickContestPage;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Checkboxes\\Checkboxes.jsx",["200"],"import React from 'react';\r\nimport classes from './checkboxes.module.scss';\r\nimport Checkbox from '../Checkbox/Checkbox';\r\n\r\nconst Checkboxes = ({children, title}) => {\r\n    return (\r\n        <div className={classes.Checkboxes}>\r\n            <h4>{title}</h4>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkboxes;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Checkbox\\Checkbox.jsx",["201","202"],"import React from 'react';\r\n\r\nimport classes from './checkbox.module.scss';\r\n\r\nconst Checkbox = ({name, isChecked, checkboxHandler, colorTheme, disable=false}) => {\r\n    let searchClass;\r\n\r\n\r\n    if (colorTheme == 'dark') {\r\n        searchClass = classes.darkStyling;\r\n    } else if (colorTheme == 'light') {\r\n        searchClass = classes.lightStyling;\r\n    }\r\n\r\n    return (\r\n        <label \r\n            className = {searchClass} \r\n            key = {name}\r\n            style = {{\r\n                \"cursor\": disable ? \"default\" : \"pointer\",\r\n                \"opacity\": disable ? \"0.35\" : \"1\"\r\n            }}\r\n        >\r\n            <input\r\n                name={name}\r\n                type=\"checkbox\"\r\n                checked={isChecked}\r\n                onChange={() => checkboxHandler(name)}\r\n            />\r\n\r\n            <span className={classes.checkmark}></span>\r\n            <span className={classes.text}>{name}</span>\r\n            <br />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Checkbox;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\RadioButton\\RadioButton.jsx",["203","204"],"import React from 'react';\r\n\r\nimport classes from './radioButton.module.scss';\r\n\r\nconst Checkbox = ({name, isChecked, checkboxHandler, colorTheme, disable=false, disableMsg=\"\"}) => {\r\n    let searchClass, \r\n        textClass = classes.text;\r\n\r\n\r\n    if (colorTheme == 'dark') {\r\n        searchClass = classes.darkStyling;\r\n    } else if (colorTheme == 'light') {\r\n        searchClass = classes.lightStyling;\r\n    }\r\n\r\n    if (isChecked) {\r\n        textClass = classes.checkedText;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.radioButtonContainer}>\r\n            <label \r\n                className = {searchClass} \r\n                key = {name}\r\n                style = {{\r\n                    \"cursor\": !isChecked && !disable ? \"pointer\" : \"default\",\r\n                    \"opacity\": disable ? \"0.35\" : \"1\"\r\n                }}\r\n            >\r\n                <input\r\n                    name={name}\r\n                    type=\"checkbox\"\r\n                    checked={isChecked}\r\n                    onClick={() => checkboxHandler(name)}\r\n                />\r\n\r\n                <span className={classes.checkmark}></span>\r\n                <span className={textClass}>{name}</span>\r\n                \r\n                <br />\r\n            </label>\r\n            {disable ? <span className={classes.disableMsg}>{disableMsg}</span> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkbox;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Slider\\CustomSlider1.jsx",["205"],"import React from 'react';\r\nimport classes from './customSlider1.module.scss';\r\n\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { discreteMSlider } from '../../Utility/sliderStyles';\r\n\r\nconst PrettoSlider = withStyles(discreteMSlider)(Slider);\r\n\r\nconst CustomSlider1 = ({\r\n    sliderValue, \r\n    valueChangeHandler, \r\n    minVal, \r\n    maxVal, \r\n    stepSize,\r\n    sliderWidth = \"100%\",\r\n    sliderMargin = \"0\"\r\n}) => {\r\n\r\n    return (\r\n        <PrettoSlider\r\n            defaultValue={sliderValue}\r\n            getAriaValueText={valueChangeHandler}\r\n            aria-labelledby=\"discrete-slider\"\r\n            valueLabelDisplay=\"auto\"\r\n            step={stepSize}\r\n            marks\r\n            min={minVal}\r\n            max={maxVal}\r\n            style= {{\r\n                \"width\": sliderWidth,\r\n                \"margin\": sliderMargin\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default CustomSlider1;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Utility\\sliderStyles.js",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Contexts\\LanguageContext.js",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickPractisePage\\QuckPractiseSettings\\QuckPractiseSettings.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Pages\\QuickContestPage\\QuickContestSettings\\QuickContestSettings.jsx",["206","207"],"import React, { useState } from 'react';\r\nimport classes from './quickContestSettings.module.scss';\r\n\r\nimport QuickContestForm from '../../../Common/Forms/FormContainer/FormContainer';\r\nimport TypeOfContestRadioButtons from '../../../Common/Checkboxes/Checkboxes';\r\nimport RadioButton from '../../../Common/RadioButton/RadioButton';\r\nimport StartContestButton from '../../../Common/Forms/FormButtons/SubmitButton/SubmitButton';\r\n\r\nconst QuickContestSettings = ({showForm}) => {\r\n    const [userLoggedIn, setUserLoggedIn] = useState(false);\r\n    const [typeOfContest, setTypeOfContest] = useState({\r\n        \"Standard\": true,\r\n        \"With friends\": false\r\n    })\r\n    const [contestMode, setContestMode] = useState({\r\n        \"Ranked\": false,\r\n        \"Casual\": true\r\n    });\r\n    \r\n\r\n    const typeOfContestHandler = (newContestType) => {\r\n        let tempTypeOfContest = {...typeOfContest};\r\n        let typeOfContestKeys = Object.keys(tempTypeOfContest);\r\n\r\n        typeOfContestKeys.forEach(contestType => {\r\n            tempTypeOfContest[contestType] = false\r\n        })\r\n\r\n        tempTypeOfContest[newContestType] = true;\r\n        setTypeOfContest(tempTypeOfContest);\r\n    }\r\n\r\n    const contestModeHandler = (newContestMode) => {\r\n        if (userLoggedIn) {\r\n            let tempContestMode = {...contestMode};\r\n            let contestModeKeys = Object.keys(tempContestMode);\r\n    \r\n            contestModeKeys.forEach(contestMode => {\r\n                tempContestMode[contestMode] = false\r\n            })\r\n    \r\n            tempContestMode[newContestMode] = true;\r\n            setContestMode(tempContestMode);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <QuickContestForm \r\n            show = {showForm}\r\n            width = \"290px\"\r\n        >\r\n            <TypeOfContestRadioButtons title=\"Type of contest\">\r\n                <RadioButton \r\n                    name = 'Standard'\r\n                    isChecked = {typeOfContest['Standard']}\r\n                    checkboxHandler = {typeOfContestHandler}\r\n                    colorTheme = \"light\"\r\n                />\r\n\r\n                <RadioButton \r\n                    name = 'With friends'\r\n                    isChecked = {typeOfContest['With friends']}\r\n                    checkboxHandler = {typeOfContestHandler}\r\n                    colorTheme = \"light\"\r\n                />\r\n            </TypeOfContestRadioButtons>\r\n\r\n            <TypeOfContestRadioButtons title=\"Contest mode\">\r\n                <RadioButton \r\n                    name = 'Ranked'\r\n                    isChecked = {contestMode['Ranked']}\r\n                    checkboxHandler = {contestModeHandler}\r\n                    colorTheme = \"light\"\r\n                    disableMsg = \"Log in required\"\r\n                    disable = {true}\r\n                />\r\n\r\n                <RadioButton \r\n                    name = 'Casual'\r\n                    isChecked = {contestMode['Casual']}\r\n                    checkboxHandler = {contestModeHandler}\r\n                    colorTheme = \"light\"\r\n                />\r\n            </TypeOfContestRadioButtons>\r\n\r\n            <StartContestButton\r\n                text = \"Start contest\"\r\n            />\r\n        </QuickContestForm>\r\n    )\r\n}\r\n\r\nexport default QuickContestSettings;","C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\TestButton.jsx",[],"C:\\Users\\sumsa\\Documents\\Utveckling\\SwiftWriter\\swift-writer-app\\src\\Components\\Common\\Buttons\\CustomButton.jsx",[],{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":15},{"ruleId":"212","severity":1,"message":"216","line":10,"column":8,"nodeType":"214","messageId":"215","endLine":10,"endColumn":18},{"ruleId":"212","severity":1,"message":"217","line":23,"column":12,"nodeType":"214","messageId":"215","endLine":23,"endColumn":23},{"ruleId":"218","severity":1,"message":"219","line":47,"column":8,"nodeType":"220","endLine":47,"endColumn":24,"suggestions":"221"},{"ruleId":"218","severity":1,"message":"219","line":50,"column":8,"nodeType":"220","endLine":50,"endColumn":24,"suggestions":"222"},{"ruleId":"218","severity":1,"message":"223","line":105,"column":8,"nodeType":"220","endLine":105,"endColumn":39,"suggestions":"224"},{"ruleId":"208","replacedBy":"225"},{"ruleId":"210","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":56,"column":13,"nodeType":"229","endLine":56,"endColumn":38},{"ruleId":"227","severity":1,"message":"228","line":55,"column":13,"nodeType":"229","endLine":55,"endColumn":39},{"ruleId":"212","severity":1,"message":"213","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":15},{"ruleId":"212","severity":1,"message":"230","line":17,"column":9,"nodeType":"214","messageId":"215","endLine":17,"endColumn":16},{"ruleId":"227","severity":1,"message":"228","line":12,"column":20,"nodeType":"229","endLine":17,"endColumn":11},{"ruleId":"227","severity":1,"message":"228","line":19,"column":20,"nodeType":"229","endLine":24,"endColumn":11},{"ruleId":"227","severity":1,"message":"228","line":14,"column":17,"nodeType":"229","endLine":14,"endColumn":41},{"ruleId":"212","severity":1,"message":"231","line":3,"column":8,"nodeType":"214","messageId":"215","endLine":3,"endColumn":14},{"ruleId":"212","severity":1,"message":"232","line":12,"column":8,"nodeType":"214","messageId":"215","endLine":12,"endColumn":21},{"ruleId":"212","severity":1,"message":"233","line":14,"column":8,"nodeType":"214","messageId":"215","endLine":14,"endColumn":27},{"ruleId":"218","severity":1,"message":"219","line":51,"column":8,"nodeType":"220","endLine":51,"endColumn":24,"suggestions":"234"},{"ruleId":"218","severity":1,"message":"219","line":44,"column":8,"nodeType":"220","endLine":44,"endColumn":24,"suggestions":"235"},{"ruleId":"218","severity":1,"message":"219","line":43,"column":8,"nodeType":"220","endLine":43,"endColumn":24,"suggestions":"236"},{"ruleId":"212","severity":1,"message":"237","line":3,"column":8,"nodeType":"214","messageId":"215","endLine":3,"endColumn":16},{"ruleId":"238","severity":1,"message":"239","line":9,"column":20,"nodeType":"240","messageId":"241","endLine":9,"endColumn":22},{"ruleId":"238","severity":1,"message":"239","line":11,"column":27,"nodeType":"240","messageId":"241","endLine":11,"endColumn":29},{"ruleId":"238","severity":1,"message":"239","line":10,"column":20,"nodeType":"240","messageId":"241","endLine":10,"endColumn":22},{"ruleId":"238","severity":1,"message":"239","line":12,"column":27,"nodeType":"240","messageId":"241","endLine":12,"endColumn":29},{"ruleId":"212","severity":1,"message":"213","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":15},{"ruleId":"212","severity":1,"message":"213","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":15},{"ruleId":"212","severity":1,"message":"242","line":10,"column":26,"nodeType":"214","messageId":"215","endLine":10,"endColumn":41},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"no-unused-vars","'classes' is defined but never used.","Identifier","unusedVar","'TestButton' is defined but never used.","'showContent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'headerText' and 'updateTime'. Either include them or remove the dependency array. You can also do a functional update 'setHeaderText(h => ...)' if you only need 'headerText' in the 'setHeaderText' call.","ArrayExpression",["245"],["246"],"React Hook useEffect has missing dependencies: 'updateTime' and 'welcomeText'. Either include them or remove the dependency array. You can also do a functional update 'setWelcomeText(w => ...)' if you only need 'welcomeText' in the 'setWelcomeText' call.",["247"],["243"],["244"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'BGColor' is defined but never used.","'SWLogo' is defined but never used.","'UsernameInput' is defined but never used.","'RepeatPasswordInput' is defined but never used.",["248"],["249"],["250"],"'Checkbox' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setUserLoggedIn' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"251","fix":"253"},{"desc":"254","fix":"255"},{"desc":"251","fix":"256"},{"desc":"251","fix":"257"},{"desc":"251","fix":"258"},"Update the dependencies array to be: [charIdx, headerText, stops, updateTime]",{"range":"259","text":"260"},{"range":"261","text":"260"},"Update the dependencies array to be: [charIdx, stops, playAnimation, updateTime, welcomeText]",{"range":"262","text":"263"},{"range":"264","text":"260"},{"range":"265","text":"260"},{"range":"266","text":"260"},[1748,1764],"[charIdx, headerText, stops, updateTime]",[2142,2158],[3623,3654],"[charIdx, stops, playAnimation, updateTime, welcomeText]",[2201,2217],[1606,1622],[1600,1616]]